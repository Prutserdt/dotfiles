#+TITLE: My configuration of
#+STARTUP: showeverything
#+STARTUP: inlineimages
#+auto_tangle: t
#+AUTHOR: Prutserdt

#+CAPTION: Doom Emacs
#+ATTR_HTML: :alt Doom Emacs :title Doom Emacs :align center
[[file:doom-emacs.png]]


* Table Of Contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#packagesel][packages.el]]
- [[#configel][config.el]]
  - [[#theming-and-graphical-settings][Theming and graphical settings]]
  - [[#evil-mode-configuration][Evil mode configuration]]
  - [[#general-settings][General settings]]
  - [[#vterm-toggle][Vterm-toggle]]
  - [[#chatgpt-in-emacs][ChatGPT in emacs]]
  - [[#custom-keybindings][Custom keybindings]]
  - [[#org-mode-configuration][Org-mode configuration]]
  - [[#org-roam-configuration][Org-roam configuration]]
  - [[#org-roam-ui-configuration][Org-Roam-ui configuration]]
  - [[#custom-code][Custom code]]
  - [[#splash-screen][Splash screen]]
- [[#code-snippets][Code snippets]]
- [[#credits][Credits]]

* About this config
This is my personal [[https://github.com/hlissner/doom-emacs][Doom Emacs]] config. Nothing much to see here. Just started this journey in the winter of 2022 and learning [[https://www.gnu.org/software/emacs/][Emacs]] and [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] along the way. The Emacs Lisp files [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/init.el][init.el]], [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/packages.el][packages.el]] and [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/config.el][config.el]] are generated from [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/README.org][this README.org file]] by tangling in Emacs: ~M-x~ ~org-babel-tangle~. Remember to run =~/.emacs.d/bin/doom sync= in the terminal, or ~M-x~ ~doom/reload~ in Doom Emacs after modifying this README.org!

* init.el
This file controls what Doom modules are enabled and what order they load in and the first line of the file is lexical binding. This makes the file run (slightly) faster.
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC

Add a note to ~init.el~ to highlight that this file should not be edited directly.
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
;; NOTE: This file is generated from ~/.doom.d/README.org
;;      Please only edit that file and org-babel-tangle (emacs)
#+END_SRC

The list of available modules can be checked in Doom Emacs by ~M-x~ ~Doom/help-modules~ and can be added to the list of modules listed below. Online module info can also be found [[https://github.com/doomemacs/doomemacs/blob/master/docs/modules.org][here]].
NOTES: some packages that should be installed on the system are, =python-pytest= and =python-nose=.
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent

(doom! :completion
       company             ; the ultimate code completion backend
       vertico             ; the search engine of the future
       (ivy +childframe)   ; a search engine for love and life

       :ui
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       (emoji +unicode)    ; ð
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       workspaces          ; tab emulation, persistence & separate workspaces

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       snippets            ; my elves. They type so I don't have to

       :emacs
       (dired +icons)      ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and :Emacs, sitting in a tree

       :term
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget

       :tools
       debugger            ; stepping through code, to help you add bugs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       lsp                 ; M-x vscode

       :lang
       emacs-lisp          ; drown in parentheses
       (org +pretty +roam2); organize your plain life in plain text
       (python +lsp +pyenv); beautiful is better than ugly
                           ; +pyright. Tried pyright, could not get it to work on all of my machines
       sh                  ; she sells {ba,z,fi}sh shells on the C xor

       :os
       tty                 ; ?test, zou terminal experience moeten verbeteren,
                           ;kijken of dit een verbetering geeft..

       :config
       (default +bindings +smartparens)
       )
#+END_SRC

NOTES: some packages should be installed on the system: =sudo pacman -S python-pytest python-nose=

* packages.el
Here the packages are defined which should be installed. This is an addition to the already installed and loaded modules of ~init.el~. This file shouln't be byte compiled.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
;; -*- no-byte-compile: t; -*-
#+END_SRC

Again a NOTE is added to ~packages.el~ to *not* edit this file.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
;; NOTE: This file is generated from ~/.doom.d/README.org
;;      Please only edit that file and org-babel-tangle (emacs)
#+END_SRC

Centering text to the middle of the window can be done by the visual-fill-column package.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(package! visual-fill-column)
#+END_SRC

Web-mode for editing of html/php/css
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(package! web-mode)
#+END_SRC

Adding arduino-mode, testing, not working properly yet.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(package! arduino-cli-mode)
(package! arduino-mode)
#+END_SRC

Settings for python and php hacking.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(package! org-babel-eval-in-repl)
(package! eval-in-repl)
(package! jupyter)
(package! phpactor)
#+END_SRC

To automate tangling of code blocks in org-mode, the following package is installed. For auto tangling to work the following line should be added to the start of the org file ~#+auto_tangle: t~. When this is added the source blocks are automatically tangled when an org document is saved, pretty sweet😃.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(package! org-auto-tangle)
#+END_SRC

The vterm-toggle package.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(package! vterm-toggle)
#+END_SRC

A chatgpt package gptel.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
;; gptel is old, and will remove it later.
(package! gptel)
#+END_SRC

~org-roam~ is a plain-text knowledge management system. It brings some of Roam's more powerful features into the Org-mode ecosystem. ~org-roam-ui~ is a frontend for exploring and interacting with your org-roam notes.
#+BEGIN_SRC emacs-lisp :tangle packages.el :results silent
(unpin! org-roam) ; unpinning is necessary for Room emacs according to de developer of org-roam-ui
(package! org-roam-ui)
#+END_SRC

* config.el
My custom configurations are set here. For instance theme settings, image to the doom splash screen, transparency, relative numbering and org-mode settings.

Let's remind the reader of ~config.el~ to not edit this file directly.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
;; NOTE: This file is generated from ~/.doom.d/README.org
;;      Please only edit that file and org-babel-tangle (emacs)
#+END_SRC

** Theming and graphical settings
Setting the *superior* tokyo-night theme.😎
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq doom-theme 'doom-tokyo-night)
#+END_SRC

Elisp is parentheses galore! The package rainbow-delimiters is matching the colors of parenthesis and this helps navigating code. Also handy for other languages.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package rainbow-delimiters)
#+END_SRC

A *superior* font is set here.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(set-frame-font "Hack 12" t t)
(setq default-frame-alist '((font . "Hack 13")))
#+END_SRC

Make the highlighting global for the hl-words TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW with ~hl-todo-mode~.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(define-globalized-minor-mode my-global-hl-todo-mode hl-todo-mode
    (lambda () (hl-todo-mode 1)))
(my-global-hl-todo-mode 1)
#+END_SRC

For ultrawide monitors I prefer to set my working window in the middle of the screen. In my case I use qtile window manager with monadthreecolumn and emacs in the middle column. With visual-fill emacs can be set to be in the middle of the window. This works with the three column layout and is especially nice for maximized windows on an ultrawide. Now it's perfectly in the middle and distraction free.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq-default fill-column 110)
(global-display-fill-column-indicator-mode)
(add-hook 'visual-line-mode-hook 'visual-fill-column-mode)
(setq-default visual-fill-column-center-text t)
#+END_SRC

Get a glimpse of the desktop background by setting a low transparency for Emacs.
NOTE: when this part is placed at the start of ~config.el~ then transparency does not work.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(set-frame-parameter (selected-frame) 'alpha '(85 80))
(add-to-list 'default-frame-alist '(alpha 85 80))
#+END_SRC

For jumping in texts it is nice to know the line position where to jump to from the current line instead of calculating it every time (current line=12, line I want to jump to=20, so move 20-12=8 lines downs: ~8j~). By setting the line numbers to ~relative~ the line numbering is relative to the current line and jumping around in the file will become quick and easy. In Doom Emacs it can also be toggled by ~SPC~ ~t~ ~l~.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+END_SRC

Sometimes I forget if I'm in insert or normal mode, even with the different cursors that are set. To help me remember the current state I am coloring the line numbers accordingly.
Here, we define an Emacs Lisp function to set the line number color based on the Evil state.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun set-line-number-color-according-to-evil-state ()
  (when (and (bound-and-true-p evil-mode)
             (not buffer-read-only))
    (cond
      ((evil-insert-state-p)
       (set-face-foreground 'line-number "#FFAD99"))
      ((evil-visual-state-p)
       (set-face-foreground 'line-number "#B978C4"))
      (t
       (set-face-foreground 'line-number "#4C6985")))))
#+END_SRC

Next, we'll set up hooks and customize line number colors based on the Evil state. We add hooks for Doom Emacs buffer switching events and hook for changing line number color when entering insert/normal/visual mode.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(add-hook 'doom-switch-buffer-hook 'set-line-number-color-according-to-evil-state)
(add-hook 'doom-first-buffer-hook 'set-line-number-color-according-to-evil-state)

(add-hook 'evil-insert-state-entry-hook 'set-line-number-color-according-to-evil-state)
(add-hook 'evil-normal-state-entry-hook 'set-line-number-color-according-to-evil-state)
(add-hook 'evil-visual-state-entry-hook 'set-line-number-color-according-to-evil-state)
#+END_SRC

I want the color of the line number of the cursor to have a different color and this is accomplished by custom-set-faces.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(custom-set-faces!
  '(line-number-current-line :foreground "#EF7168"))
#+END_SRC

The scroll bar is not needed and removed here. NOTE: does not work when it's at the start of config.el.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(scroll-bar-mode -1)
#+END_SRC

** Evil mode configuration
The default setting of Evil mode in Doom Emacs is to use Y in normal mode to yank the whole line from the cursor position. This is obviously the *incorrect* way and is reverted here to copy the whole line, regardless of cursor position.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq! evil-want-Y-yank-to-eol nil)
#+END_SRC

Another trick to make the cursor stand out more in Evil mode is to use the color tomato for the cursor in normal mode. It pops right out. A white bar is set for insert mode and a hollow orange cursor for visual mode. This helps to differentiate between normal/insert/visual mode.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq evil-normal-state-cursor '(box "tomato")
      evil-insert-state-cursor '(bar "white")
      evil-visual-state-cursor '(hollow "orange"))
#+END_SRC

Flashing of yanked text is already set out of the box in Doom Emacs. I'm kinda slow and like the flashing to take longer. The default is 0.2 second and set it here to a whole second.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq evil-goggles-duration 1.0)
#+END_SRC

** General settings
Set the default mode of the scratch buffer to org-mode as inspired by [[https://blog.karssen.org/2014/07/28/changing-the-default-mode-of-the-emacs-scratch-buffer][this source]] and add a initial scratch message.
#+BEGIN_SRC emacs-lisp :tangle config.el  :results silent
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message
    (concat "* Hack away❗\n A _temporary_ *org-mode* ~scratch buffer~ /for/ *hacking*. =This buffer is *not* saved.= \n\n"))
#+END_SRC

Arduino .ino files are a type of C++ code. Let's help Emacs remember this by setting it as a major mode.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(add-to-list 'auto-mode-alist '("\\.ino\\'" . c-mode))
#+END_SRC

No more conformation messages whilst closing emacs.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq confirm-kill-emacs nil)
#+END_SRC

** Vterm-toggle
I like to use Vterm as a scratch terminal, this can be done by the vterm-toggle package.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package! vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  (reusable-frames . visible)
                  (window-height . 0.5))))
#+END_SRC

** ChatGPT in emacs
In this elisp code, `with-temp-buffer` creates a temporary buffer for reading the contents of the file. `insert-file-contents` reads the contents of the file into the buffer. `string-trim` removes any whitespace characters at the beginning and end of the buffer's contents, and the resulting string is set to the variable `gptel-api-key`.
A chatGPT key can be generated here: https://platform.openai.com/account/api-keys.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package! gptel
 :config
(with-temp-buffer
  (insert-file-contents "~/Stack/Code/OpenAI/api_key")
  (setq! gptel-api-key (string-trim (buffer-string)))))
(setq gpt-openai-engine "gpt-4-1106-preview") ;; "gpt-4"does not work yet
#+END_SRC

** Custom keybindings
Emacs uses a lot of keybindings and Doom Emacs adds even more on top of it, which is not enough!

*** Evil keybindings
I want to use the =undo-redo= package in Evil mode and therefore I add the keybinding to =U= here. Another addition to the default Doom Evil mode is that I want to use =[= and =]= to switch buffers.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(after! evil
  (define-key evil-normal-state-map "U" 'undo-redo)
  (define-key evil-normal-state-map "]" 'next-buffer)
  (define-key evil-normal-state-map "[" 'previous-buffer))
#+end_src

The following are keybindings that are bound to my leader key, which is =space=, the default leader key in Doom Emacs that uses the Evil, which is mimicking Vim .
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(map! :leader
      :desc "Scratch buffer" "[" #'(lambda () (interactive) (switch-to-buffer "*scratch*"))
    (:prefix ("c") ;; Default Doom keybinding,
        (:prefix ("h" . "ChatGPT, GPTel options")
            :desc "ChatGPT of selected region"   "a" #'gptel-send
            :desc "Open ChatGPT in new buffer"   "A" #'gptel
            :desc "gptel-menu"                   "m" #'gptel-menu
            :desc "API for LLM interaction"      "R" #'gptel-request
            :desc "gptel-rewrite-menu"           "r" #'gptel-rewrite-menu))
    (:prefix ("d" . "Prutserdt Bindings")
        :desc "Vterm toggle"                   "SPC" #'vterm-toggle
        (:prefix ("a" . "Arduino IDE")
            :desc "ESP32 PWRSTRK upload"         "p" #'my-PowerStrike-upload
            :desc "README.org, het epistel"      "r" #'my-PowerStrike-README-org-file
            :desc "ESP32 serial"                 "s" #'my-serial-ttyUSB0-115200
            :desc "ESP32 PWRSTRK testing upload" "t" #'my-PowerStrike-testing-upload)
        (:prefix ("c" . "Cloud stuff")
            (:prefix ("b" . "Backup to cloud")
            :desc "Thinkpad backup to cloud"     "t" #'doom/tangle
            :desc "VBox Arch backup to cloud"    "v" #'doom/tangle))
        :desc "redox kb reset xmod"              "d" #'my-keyboard-reset
        (:prefix ("f" . "Financial stuff")
            :desc "Show my capital"              "c" #'my-asset-allocation-in-time)
        :desc "Reload Doom: doom/reload"         "r" #'doom/reload
        :desc "Tangling: org-babel-tangle"       "t" #'org-babel-tangle
        :desc "Plak keuze uit kill ring"         "p" #'counsel-yank-pop
        :desc "Write this buffer to file"        "w" #'write-file)
    (:desc "Open my Emacs config" :ng "e" (cmd! (find-file (expand-file-name "README.org" doom-user-dir))))
    (:prefix ("r" . "org-roam") ;; similar to Doom default, SPC n r. Slightly shorter as: SPC r
        :desc "Open random node"                 "a" #'org-roam-node-random
        (:prefix ("c" . "Change to anoter notes dir")
            :desc "Goto default notes"           "d" #'my-org-roam-default
            :desc "Goto Thinkpad notes"          "t" #'my-org-roam-thinkpad
            :desc "Goto work notes @ home"       "w" #'my-org-roam-work
            :desc "Goto work notes @ work"       "W" #'my-org-roam-at-work-about-work)
        (:prefix ("d" . "dailies")
            :desc "Find daily dir"               "-" #'org-roam-find-directory
            :desc "Goto previous note"           "b" #'org-roam-dailies-goto-previous-note
            :desc "Open new daily"               "d" #'org-roam-dailies-capture-today
            :desc "Capture date"                 "D" #'org-roam-dailies-capture-date
            :desc "Goto next note"               "f" #'org-roam-dailies-goto-next-note
            :desc "Goto tomorrow"                "m" #'org-roam-dailies-goto-tomorrow
            :desc "Capture tomorrow"             "M" #'org-roam-dailies-capture-tomorrow
            :desc "Goto today"                   "t" #'org-roam-dailies-goto-today
            :desc "Capture today"                "T" #'org-roam-dailies-capture-today
            :desc "Goto yesterday"               "y" #'org-roam-dailies-goto-yesterday
            :desc "Capture yesterday"            "Y" #'org-roam-dailies-capture-yesterday)
        :desc "Find node"                        "f" #'org-roam-node-find
        :desc "Find ref"                         "F" #'org-roam-ref-find
        :desc "Show graph"                       "g" #'org-roam-graph
        :desc "Insert node"                      "i" #'org-roam-node-insert
        :desc "Message: show roam dir info"      "m" #'my-show-org-roam-directory-info
        :desc "Capture to node"                  "n" #'org-roam-capture
        :desc "Select dailies calendar"          "o" #'org-roam-dailies-goto-date
        :desc "Toggle roam buffer"               "r" #'org-roam-buffer-toggle
        :desc "Launch roam buffer"               "R" #'org-roam-buffer-display-dedicated
        :desc "Search Roam dir"                  "s" #'my-counsel-rg-roam-dir
        :desc "Sync database"                    "S" #'org-roam-db-sync
        :desc "Goto today"                       "t" #'org-roam-dailies-goto-today
        :desc "Capture today"                    "T" #'org-roam-dailies-capture-today
        :desc "UI in browser"                    "u" #'org-roam-ui-mode))
#+end_src

*** Emacs keybindings
I want to use the escape key to exit keychords, similar to C-g. Let's see if this will give conflicts somewhere else, for now it seems to work 😌.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(global-set-key (kbd "<escape>")      'keyboard-escape-quit)
#+END_SRC

In Doom Emacs the =transpose-words= is using the keybinding Meta-t. For the oposite transposition I will use the keybinding Meta-T.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(global-set-key (kbd "M-T") (lambda () (interactive) (transpose-words -1)))
#+END_SRC

** Org-mode configuration
Setup to use sql in org code blocks. Commented out because I am not using it anymore.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
;;(org-babel-do-load-languages
;; 'org-babel-load-languages
;; '((sql . t)))
#+END_SRC

More eye candy by superstar bullets in org mode instead of the default ~*~. This requires (org +pretty) in ~init.el~.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq org-superstar-headline-bullets-list '("◉" "○" "✿" "✸" "⁖" ))
#+END_SRC

Setting the size of the headers in org mode and the document titled, ordered by the level of course.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
  '(org-document-title ((t (:inherit org-level-1 :height 1.6)))))
#+END_SRC

Hide the emphasis markup for: /italic/, *bold*, ~code~, _underscore_, =verbatim= and +strikethrough+.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq org-hide-emphasis-markers t)
#+END_SRC

Show a custom folding character, in my case three time lightning ⚡⚡⚡.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq org-ellipsis "⚡⚡⚡") ;; alternatives: ⤵↖↩ ⤵)⥆,⬎ ↴, ⬎,↻ ⤷
#+END_SRC

Automatically tangling by the org-auto-tangle package.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package org-auto-tangle
  :load-path "site-lisp/org-auto-tangle/"    ;; this line is necessary only if you cloned the repo in your site-lisp directory
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+END_SRC

Assign a directory with org daily files that will be used for org-agenda en my todo lists.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq org-agenda-files
;;  '("~/Shared_directory/RoamNotes/daily"))   ;; Virtual machine Arch dir
    '("~/Stack/Command_line/RoamNotes/daily")) ;; default location
#+END_SRC

** Org-roam configuration
~Org-roam~ is a plain text knowledge management system that borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.
In the code block below the directory is set where the atomic files will be stored and also the dailies directory is set here.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package org-roam
    :custom
    (org-roam-directory "~/Stack/Command_line/RoamNotes")  ;; desktop normal location
;;  (org-roam-directory "~/Shared_directory/RoamNotes")    ;; Virtual machine Arch dir
    (org-roam-dailies-directory "daily/")                  ;; the subdir for dailies in roam-dir
    (org-roam-completion-everywhere t)
    :config
    (org-roam-db-autosync-enable))
#+END_SRC

For quick daily notes and a TODO list I am using roam-dailies and in the next code block two templates are created that are helping to write notes/TODOS. This is based on [[https://org-roam.discourse.group/t/daily-task-management-with-org-agenda-and-org-roam-dailies/989/16][a thread]]. My daily notes are written in the =/daily= directory in =RoamNotes=, as already set in the previous code block, and the notes are placed in an org file with the name of the day, for example /2025-01-30.org/.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq org-roam-dailies-capture-templates
    (let ((head
           (concat "#+title: %<%Y-%m-%d (%A)>\n#+startup: showall\n"
                    "* Aantekeningen van vandaag\n\n* TODO van vandaag [/]\n")))
         `(("a" "Aantekeningen van vandaag" entry
           "* %<%H:%M> %?"
           :if-new (file+head+olp "%<%Y-%m-%d>.org" ,head ("Aantekeningen van vandaag")))
          ("t" "TODO van vandaag" item
           "[ ] %?"
           :if-new (file+head+olp "%<%Y-%m-%d>.org" ,head ("TODO van vandaag"))))))
#+END_SRC

To perform a quick word search through all of my notes I use the rip-grep (rg) package called counsel-rg and I set it up to search through the RoamNotes directory. This function is used in the  [[#custom-keybindings][Custom keybindings]].
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-counsel-rg-roam-dir ()
    "Search using `counsel-rg` in the set org-roam-directory."
    (interactive)
    (counsel-rg nil org-roam-directory))
#+END_SRC

** Org-Roam-ui configuration
~org-roam-ui~ is a graphical front end for org-roam. It will open a browser for exploring and interacting with your org-roam notes and therefore a websocket package is needed.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package! websocket
    :after org-roam)
#+END_SRC

Now that the websocket is setup the org-roam-ui can be set.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(use-package! org-roam-ui
    :after org-roam ;; or :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

** Custom code
*** elisp: org-roam
A general function that is used to switch to roam directories, the ones below are using this function.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-org-roam-switch (roam-dir)
  "Switch to the roam notes in the specified directory. This function is not intended to be used separately, although this is possible. It is used by other Elisp code which will inject the desired Roam directory."
  (interactive "DSet Roam Directory:")
  (if (string= org-roam-directory roam-dir)
      (message (format "Roam directory not changed because it is already set to '%s'" roam-dir))
    (progn
      (setq org-roam-directory roam-dir)
      (setq org-roam-dailies-directory "daily/")
      (org-roam-db-sync)
      (message (format "Switched to %s" roam-dir)))))
#+END_SRC

Switch to the default roam-notes.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-org-roam-default ()
  "Switch to my default desktop roam notes. This uses the Elisp function my-org-roam-switch."
  (interactive)
  (my-org-roam-switch "~/Stack/Command_line/RoamNotes"))
#+END_SRC

Switch to the roam-notes of my Thinkpad on my desktop.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-org-roam-thinkpad ()
  "Switch to the roam notes of my Thinkpad, on my desktop. This uses the Elisp function my-org-roam-switch."
  (interactive)
  (my-org-roam-switch "~/Stack/Thinkpad/RoamNotes"))
#+END_SRC

Switch to the roam-notes of my work on my desktop/Thinkpad.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-org-roam-work ()
  "Switch to the roam notes of my work (not at work). This uses the Elisp function my-org-roam-switch."
  (interactive)
  (my-org-roam-switch "~/Stack/VBox_Arch/RoamNotes"))
#+END_SRC

Switch to the work notes on my Virtual box distro at my work.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-org-roam-at-work-about-work ()
  "Switch to the work roam notes on VirtualBox (at work). This uses the Elisp function my-org-roam-switch."
  (interactive)
  (my-org-roam-switch "~/Shared_directory/RoamNotes"))
#+END_SRC

Show information about the org-roam files and list the amount of org files, the amount of lines and words in the org-roam directory and daily subdirectory as well.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-show-org-roam-directory-info ()
  "Show information about the current org-roam directory and its 'daily' subdirectory. Files are counted, number of lines and words as well."
  (interactive)
  (let* ((roam-dir org-roam-directory)
         (daily-dir (expand-file-name "daily" roam-dir))
         (all-files-roam (directory-files roam-dir nil))
         (org-files-roam (cl-remove-if-not #'(lambda (file) (string-match-p "\\.org$" file)) all-files-roam))
         (non-org-files-roam (cl-remove-if #'(lambda (file) (string-match-p "\\.org$" file)) all-files-roam))
         (all-files-daily (directory-files daily-dir nil))
         (org-files-daily (cl-remove-if-not #'(lambda (file) (string-match-p "\\.org$" file)) all-files-daily))
         (non-org-files-daily (cl-remove-if #'(lambda (file) (string-match-p "\\.org$" file)) all-files-daily))
         (org-file-count-roam (length org-files-roam))
         (org-file-count-daily (length org-files-daily))
         (org-file-count-total (+ org-file-count-roam org-file-count-daily))
         (total-lines-org 0)
         (total-words-org 0)
         (total-lines-daily 0)
         (total-words-daily 0))

    ;; Calculate lines and words for org files in the 'daily' directory
    (dolist (file (directory-files daily-dir nil "\\.org$"))
      (with-temp-buffer
        (insert-file-contents (expand-file-name file daily-dir))
        (setq total-lines-daily (+ total-lines-daily (count-lines (point-min) (point-max))))
        (setq total-words-daily (+ total-words-daily (count-words (point-min) (point-max))))))

    ;; Calculate lines and words for org files in the main directory
    (dolist (file org-files-roam)
      (with-temp-buffer
        (insert-file-contents (expand-file-name file roam-dir))
        (setq total-lines-org (+ total-lines-org (count-lines (point-min) (point-max))))
        (setq total-words-org (+ total-words-org (count-words (point-min) (point-max))))))
    (message "Statistics about my second brain 🤓
Brain shelve: %s.

             Roam dir, daily dir, total
org files    %d, %d, %d
line numbers %d, %d, %d
word count   %d, %d, %d"
             roam-dir
             org-file-count-roam org-file-count-daily org-file-count-total
             total-lines-org total-lines-daily (+ total-lines-org total-lines-daily)
             total-words-org total-words-daily (+ total-words-org total-words-daily))))
#+END_SRC


*** elisp: ESP32, Arduino and serial communication
The following code will open ttyUSB0 and gives the options to cycle through baudrates.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defvar data-bits nil
  "Number of data bits for the serial monitor")

(defvar my-serial-current-index 0
  "Current index of the baudrate in the list")

(defvar my-serial-baudrates '(300 600 1200 2400 4800 9600 19200 38400 57600 115200 230400 460800 57600 921600 1000000 2000000 3000000)
  "List of baudrates to cycle through")

(defvar my-serial-process nil
  "Serial process")

(defun my-serial-next-baudrate ()
  "Switch to the next baudrate in the list"
  (interactive)
  (when my-serial-process
    (delete-process my-serial-process))
  (setq my-serial-current-index (mod (1+ my-serial-current-index)
                                     (length my-serial-baudrates)))
  (let* ((baudrate (nth my-serial-current-index my-serial-baudrates))
         (command (concat "screen /dev/ttyUSB0 " (number-to-string baudrate))))
    (setq my-serial-process (start-process "serial-terminal" nil shell-file-name "-c" command))
    (message "Switched to baudrate: %s" baudrate)))

(defun my-serial-ttyUSB0 (data-bits)
  "Serial monitor to ttyUSB0 using baudrates in a cycle with specified data bits"
  (interactive "sEnter 7 or 8 for data bits: ")
  (when (not (or (string= data-bits "7") (string= data-bits "8")))
    (error "Invalid data bits specified. Please enter 7 or 8."))
  (split-window-horizontally)
  (my-serial-next-baudrate)
  (switch-to-buffer "/dev/ttyUSB0")
  (windmove-right)
  (setq my-serial-process-filter
        (lambda (proc str)
          (process-send-string proc (concat "sb " data-bits "\n"))))
  (set-process-filter my-serial-process my-serial-process-filter)
  (process-send-string my-serial-process (concat "sb " data-bits "\n")))

(global-set-key (kbd "C-c C-g") 'my-serial-next-baudrate)
(global-set-key (kbd "C-c C-m") 'my-serial-ttyUSB0)
#+end_src

A piece of custom lisp code to debug/upload my test Arduino code to a ESP32 processor and move windows around to make Emacs a comfy IDE. Remark: (interactive) is needed to be able to run with hotkeys.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-PowerStrike-testing-upload ()
    "Upload arduino Powerstrike code to ESP32. Opens an async shell command and runs arduino code on ESP32 and port ttyUSB0. The windows are manipulated to be a kind of an IDE."
    (interactive)
    (async-shell-command "arduino --board esp32:esp32:esp32 --port /dev/ttyUSB0 --upload ~/Stack/Code/git/PowerStrike_code/testing/testing.ino")
    (doom/window-maximize-buffer)
    (split-window-horizontally)
    (switch-to-buffer "*Async Shell Command*")
    (windmove-right))
#+END_SRC

Another piece of custom Elisp code. Again Emacs is used as a comfortable IDE, here the serial output of ttyUSBo at 115200 baudrate is spit into an emacs buffer.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-serial-ttyUSB0-115200 ()
   "Serial monitor to ttyUSB0 115200 baudrate is shown in a split window to the left."
    (interactive)
    (split-window-horizontally)
    (serial-term "/dev/ttyUSB0" 115200)
    (switch-to-buffer "/dev/ttyUSB0")
    (windmove-right))
#+END_SRC
TODO: I would like to run ~my-serial-ttyUSB0-115200~ directly after ~PowerStrike-testing-upload~ , but did not figure out how to do this. I tried to close the *Async Shell Command* window when it generates the output "Hard resetting via RTS pin." but this did not work.

Open my Arduino PowerStrike README.org file.
#+BEGIN_SRC emacs-lisp :tangle config.el  :results silent
(defun my-PowerStrike-README-org-file ()
  "Open the README.org of my PowerStrike ESP32 project."
  (interactive)
  (find-file (expand-file-name "README.org" "~/Stack/Code/git/PowerStrike_code")))
#+END_SRC

*** elisp: miscelaneous
Remap my keyboard with xmodmap
#+BEGIN_SRC emacs-lisp :tangle config.el  :results silent
(defun my-keyboard-reset ()
  "Change Esc/caps, right mod, right alt, for my redox keyboard."
  (interactive)
  (shell-command "xmodmap $HOME/.config/rdxswitch && xmodmap $HOME/.config/rdxswitch && xmodmap $HOME/.config/kbswitch && xset r rate 300 80 && notify-send -t 6000 'The keyboard was reset by Emacs'"))
#+END_SRC

Connect my cloud to the Thunar filemanager. NOTE: the thunar command should be in the =myThunarCloud= textfile of course 😀.
#+BEGIN_SRC emacs-lisp :tangle config.el  :results silent
(defun my-thunar-cloud-connection ()
  "Connect my cloud to Thunar filebrowser."
  (interactive)
  (with-temp-buffer
  (insert-file-contents "~/Stack/Command_line/myThunarCloud")
  (shell-command (string-trim (buffer-string)))))
#+END_SRC

Show a map of my asset allocation in time by running a Python script.
#+BEGIN_SRC emacs-lisp :tangle config.el  :results silent
(defun my-asset-allocation-in-time ()
  "Show my asset allocation vs time in a chart. Done by running a Python script."
  (interactive)
  (let ((script-path "~/Stack/Documenten/Aandelen/Plotten_AA_in_de_tijd.py"))
    (setq default-directory (file-name-directory script-path))
    (shell-command (concat "notify-send -t 6000 'Displaying my AA plot: " script-path "'"))
    (shell-command (concat "python3 " script-path)
                   "*Python Output*")
    (message (concat "Python script executed: " script-path))))
#+END_SRC

Open my Redox keyboard QMK directory.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-redox-directory ()
  "Open the keymap.c file of my Redox qmk firmware."
  (interactive)
  (find-file (expand-file-name "" "~/qmk_firmware/keyboards/redox/keymaps/Prutserdt")))
#+END_SRC

Open my =keymap.c= file of my redox keyboard.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun my-redox-config-qmk-file ()
  "Open the keymap.c file of my Redox qmk firmware."
  (interactive)
  (find-file (expand-file-name "keymap.c" "~/qmk_firmware/keyboards/redox/keymaps/Prutserdt")))
#+END_SRC

** Splash screen
A useless but pretty Emacs welcome screen is created including an image and some text based on the default Doom emacs welcome screen.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(setq fancy-splash-image "~/.doom.d/doom-emacs.png")
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

(add-hook! '+doom-dashboard-functions :append
    (insert "\n" (+doom-dashboard--center +doom-dashboard--width "An Emacs framework for the stubborn martian hacker, modified.\n\n")
    (+doom-dashboard--center +doom-dashboard--width "It is a story as old as time.\n")
    (+doom-dashboard--center +doom-dashboard--width "A stubborn, shell-dwelling and melodramatic\n")
    (+doom-dashboard--center +doom-dashboard--width "vimmer spirals into despair\n")
    (+doom-dashboard--center +doom-dashboard--width "before he succumbs to the dark side. \n\n")
    (+doom-dashboard--center +doom-dashboard--width "To get into the rabbit hole press 'e'")))
#+END_SRC

A function is created to make a special keymap for the splash screen.
For reference: the default doom-dashboard can be found here: =~/.emacs.d/modules/ui/doom-dashboard/config.el=.
#+BEGIN_SRC emacs-lisp :tangle config.el :results silent
(defun +doom-dashboard-setup-modified-keymap ()
  (setq +doom-dashboard-mode-map (make-sparse-keymap))
  (map! :map +doom-dashboard-mode-map
        :desc "Increase font size(temporary)" :ng "+" #'doom/increase-font-size
        :desc "Decrease font size(temporary)" :ng "-" #'doom/decrease-font-size
        :desc "Change font(temporary)" :ng "f" #'menu-set-font
        :desc "Change theme(temporary)" :ng "t" #'consult-theme
        :desc "Open my Emacs config; README.org" :ng "e" (cmd! (find-file (expand-file-name "README.org" doom-user-dir)))
        :desc "Exiting via Evil-mode" :ng "ZZ" #'save-buffers-kill-terminal))
(add-transient-hook! #'+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap))
(add-transient-hook! #'+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap))
(add-hook! 'doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap))
#+END_SRC

* Code snippets
Code snippets can automate lots of stuff. Here below is an example. In org-mode <p tab will insert the following snippet:
#+BEGIN_SRC snippet :tangle snippets/org-mode/PythonBlock
# -*- mode: snippet -*-
# name: PythonBlock
# key: <p
# --
#+BEGIN_SRC python :tangle ${2:wismij}.py :results output
# NOTE, this file is generated from the org file:
# `(file-name-nondirectory (buffer-file-name))`
# Only modify the org file and not this Python file.

$0
#+END_SR${1:C}
#+END_SRC

Remark: Github cannot handle a code block inside a codeblock. The line ~#+BEGIN_SRC python :tangle ${2:wismij}.py :results output~ under the line ~# --~ is actually in this README.org file but not showing on the Github page. Also the bottom line ~#+end_sr${1:c}~ is not showing on the github page. Check the [[https://raw.githubusercontent.com/Prutserdt/dotfiles/master/.doom.d/README.org][raw README.org]] file for that.

* Credits
My configuration of Doom Emacs is partially based on these:
- 🔗 https://github.com/doomemacs/doomemacs
- 🔗 https://tecosaur.github.io/emacs-config/config.html
- 🔗 https://gitlab.com/zzamboni/dot-doom
- 🔗 https://systemcrafters.net/
- 🔗 https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org
