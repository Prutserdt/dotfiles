#+TITLE: My configuration of
#+STARTUP: showeverything
#+STARTUP: inlineimages
#+auto_tangle: t
#+AUTHOR: Prutserdt

#+CAPTION: Doom Emacs
#+ATTR_HTML: :alt Doom Emacs :title Doom Emacs :align center
[[https://github.com/Prutserdt/dotfiles/raw/master/.doom.d/doom-emacs.png]]

* Table Of Contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#packagesel][packages.el]]
- [[#configel][config.el]]
  - [[#theming-and-graphical-settings][Theming and graphical settings]]
  - [[#evil-mode-configuration][Evil mode configuration]]
  - [[#general-settings][General settings]]
  - [[#chatgpt-in-emacs][ChatGPT in emacs]]
  - [[#custom-keybindings][Custom keybindings]]
  - [[#org-mode-configuration][Org-mode configuration]]
  - [[#org-roam-configuration][Org-roam configuration]]
  - [[#org-roam-ui-configuration][Org-Roam-ui configuration]]
- [[#code-snippets][Code snippets]]
- [[#credits][Credits]]

* About this config
This is my personal [[https://github.com/hlissner/doom-emacs][Doom Emacs]] config. Nothing much to see here. Just started this journey and learning [[https://www.gnu.org/software/emacs/][Emacs]] and [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] along the way. The Emacs Lisp files [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/init.el][init.el]], [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/packages.el][packages.el]] and [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/config.el][config.el]] are generated from [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/README.org][this README.org file]] by tangling in Emacs ~M-x~ ~org-babel-tangle~. Remember to run =~/.emacs.d/bin/doom sync= in the terminal, or ~M-x~ ~doom/reload~ in Doom Emacs, after modifying this README.org!

* init.el
This file controls what Doom modules are enabled and what order they load in and the first line of the file is lexical binding. This makes the file run (sligthly) faster.
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

Add a note to ~init.el~ to highlight that this file should not be edited directly.
#+begin_src emacs-lisp :tangle init.el
;; NOTE: This file is generated from ~/.doom.d/README.org
;;      Please only edit that file and org-babel-tangle (emacs)
#+end_src

The list of available modules can be checked in Doom Emacs by ~M-x~ ~Doom/help-modules~ and can be added to the list of modules listed below.
#+begin_src emacs-lisp :tangle init.el

(doom! :completion
       company             ; the ultimate code completion backend
       vertico             ; the search engine of the future
       (ivy +childframe)   ; a search engine for love and life

       :ui
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       (emoji +unicode)    ; ð
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       vc-gutter           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       workspaces          ; tab emulation, persistence & separate workspaces
       treemacs            ; a project drawer, like neotree but cooler

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       snippets            ; my elves. They type so I don't have to

       :emacs
       (dired +icons)      ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and :Emacs, sitting in a tree

       :term
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget

       :tools
       debugger            ; stepping through code, to help you add bugs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       lsp                 ; M-x vscode
       magit               ; a git porcelain for Emacs

       :lang
       emacs-lisp          ; drown in parentheses
       markdown            ; writing docs for people to ignore
       (org +pretty +roam2); organize your plain life in plain text
       (python +lsp)       ; beautiful is better than ugly
                           ; +pyright. Tried pyright, could not get it to work on all of my machines
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       php                 ; perl's insecure younger brother
       latex

       :app

       :config
       (default +bindings +smartparens)
       )
#+end_src

* packages.el
Here the packages are defined which should be installed. This is an addition to the already installed and loaded modules of ~init.el~. This file shouln't be byte compiled.
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
#+end_src

Again a NOTE is added to ~packages.el~ to *not* edit this file.
#+begin_src emacs-lisp :tangle packages.el
;; NOTE: This file is generated from ~/.doom.d/README.org
;;      Please only edit that file and org-babel-tangle (emacs)
#+end_src

A package can be installed from MELPA, ELPA or emacsmirror by (package! package_name). The beacon package is not part of the Doom Emacs modules and is added here. /Never lose your cursor again/ by highlighting the cursor after scrolling.
#+begin_src emacs-lisp :tangle packages.el
(package! beacon)
#+end_src

Centering text to the middle of the window can be done by the visual-fill-column package.
#+begin_src emacs-lisp :tangle packages.el
(package! visual-fill-column)
#+end_src

Centered-cursor mode, keep the cursor in one place while scrolling. At this moment I am not using it anymore, I will keep this package for a while .
#+begin_src emacs-lisp :tangle packages.el
(package! centered-cursor-mode)
#+end_src

Web-mode for editing of html/php/css
#+begin_src emacs-lisp :tangle packages.el
(package! web-mode)
#+end_src

Adding arduino-mode, testing, not working properly yet.
#+begin_src emacs-lisp :tangle packages.el
(package! arduino-cli-mode)
(package! arduino-mode)
#+end_src

Settings for python and php hacking.
#+begin_src emacs-lisp :tangle packages.el
(package! org-babel-eval-in-repl)
(package! eval-in-repl)
(package! jupyter)
(package! phpactor)
#+end_src

To automate tangling of code blocks, the following package is installed. For auto tangling to work the following line should be added to the start of the org file ~#+auto_tangle: t~. When this is added the source blocks are automatically tangled when an org document is saved, pretty sweet😃.
#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

The chatgpt package gptel.
#+begin_src emacs-lisp :tangle packages.el
(package! gptel)
#+end_src

~org-roam~ is a plain-text knowledge management system. It brings some of Roam's more powerful features into the Org-mode ecosystem. ~org-roam-ui~ is a frontend for exploring and interacting with your org-roam notes.
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam) ; unpinning is necessary for Room emacs according to de developer of org-roam-ui
(package! org-roam-ui)
#+end_src

* config.el
My custom configurations are set here. For instance theme settings, image to the doom splash screen, transparency, relative numbering, org settings.

Let's remind the reader of ~config.el~ to not edit this file directly.
#+begin_src emacs-lisp :tangle config.el
;; NOTE: This file is generated from ~/.doom.d/README.org
;;      Please only edit that file and org-babel-tangle (emacs)
#+end_src

** Theming and graphical settings
Setting the *superior* tokyo-night theme. 🤩
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-tokyo-night)
#+end_src

The Emacs welcome screen is modified here. A different image is used, the default widgets are removed and alternative text is added. This is pretty but kind of useless. I will add functionality later. Perhaps some
#+begin_src emacs-lisp :tangle config.el
(setq fancy-splash-image "~/.doom.d/doom-emacs.png")
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-functions :append
  (insert "\n" (+doom-dashboard--center +doom-dashboard--width "A melodramatic vimmer spirals into despair before he succumbs to the dark side: this config.")))
#+end_src

Finding the cursor can be tricky after scrolling or page up/down. The beacon module comes to the resque by highlighing the cursor area. /Never lose your cursor again/. Because I'm slow I set the blinkin duration to a whole 3 seconds.
#+begin_src emacs-lisp :tangle config.el
(beacon-mode 1)
(setq beacon-blink-duration 3)
#+end_src

Make the cursor stay in the middle of the screen while scrolling. Another trick to /Never lose your cursor again/. I switched this mode off since I am not getting used to it. NOTE; remove this package in the future if this is not used anymore...
#+begin_src emacs-lisp :tangle config.el
;;(use-package centered-cursor-mode
;;  :demand
;;  :config
;;  ;; Optional, enables centered-cursor-mode in all buffers.
;;  (global-centered-cursor-mode))
#+end_src

Elisp is parentheses galore! The package rainbow-delimiters is matching the colors of parenthesis and this helps navigating code. Also handy for other languages.
#+begin_src emacs-lisp :tangle config.el
(use-package rainbow-delimiters)
#+end_src

A *superior* font is set here.
#+begin_src emacs-lisp :tangle config.el
(set-frame-font "Hack 12" t t)
(setq default-frame-alist '((font . "Hack 13")))
#+end_src

Make the highlighting global for the words TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW with ~hl-todo-mode~.
#+begin_src emacs-lisp :tangle config.el
(define-globalized-minor-mode my-global-hl-todo-mode hl-todo-mode
  (lambda () (hl-todo-mode 1)))
(my-global-hl-todo-mode 1)
#+end_src

For ultrawide monitors I prefer to set my working window in the middle of the screen. In my case I use qtile window manager with monadthreecolumn and emacs in the middle column. With visual-fill emacs can be set to be in the middle of the window. This works with the three column layout and is especially nice for maximized windows on an ultrawide. Now it's perfectly in the middle and distraction free.
#+begin_src emacs-lisp :tangle config.el
(setq-default fill-column 110)
(global-display-fill-column-indicator-mode)
(add-hook 'visual-line-mode-hook 'visual-fill-column-mode)
(setq-default visual-fill-column-center-text t)
#+end_src

Get a glimpse of the desktop background by setting a low transparency for Emacs.
NOTE: when this part is placed at the start of ~config.el~ then transparency does not work.
#+begin_src emacs-lisp :tangle config.el
(set-frame-parameter (selected-frame) 'alpha '(85 80))
(add-to-list 'default-frame-alist '(alpha 85 80))
#+end_src

For jumping in texts it is nice to know the line position where to jump to from the current line instead of calculating it every time (current line=12, line I want to jump to=20, so move 20-12=8 lines downs: ~8j~). By setting the line numbers to ~relative~ the line numbering is relative to the current line and jumping around in the file will become quick and easy. In Doom Emacs it can also be toggled by ~SPC~ ~t~ ~l~.
#+begin_src emacs-lisp :tangle config.el
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src

Remove the scroll bar. NOTE: does not work when it's at the start of config.el.
#+begin_src emacs-lisp :tangle config.el
(scroll-bar-mode -1)
#+end_src

** Evil mode configuration
The default setting of Evil mode in Doom Emacs is to use Y in normal mode to yank the whole line from the cursor position. This is obviously the *incorrect* way and is reverted here to copy the whole line, regardless of cursor position.
#+begin_src emacs-lisp :tangle config.el
(setq! evil-want-Y-yank-to-eol nil)
#+end_src

Another trick to make the cursor stand out more in Evil mode is to use the color tomato for the cursor in normal mode. It pops right out. A white bar is set for insert mode and a hollow orange cursor for visual mode. This helps to differentiate between normal/insert/visual mode.
#+begin_src emacs-lisp :tangle config.el
(setq evil-normal-state-cursor '(box "tomato")
      evil-insert-state-cursor '(bar "white")
      evil-visual-state-cursor '(hollow "orange"))
#+end_src

Flashing of yanked text is already set out of the box in Doom Emacs. I'm kinda slow and like the flashing to take longer. The default is 0.2 second and set it here to a whole second.
#+begin_src emacs-lisp :tangle config.el
(setq evil-goggles-duration 1.0)
#+end_src

** General settings
Arduino .ino files are a type of C++ code. Let's help Emacs remember this by setting it as a major mode.
#+begin_src emacs-lisp :tangle config.el
(add-to-list 'auto-mode-alist '("\\.ino\\'" . c-mode))
#+end_src

No more conformation message after closing emacs.
#+begin_src emacs-lisp :tangle config.el
(setq confirm-kill-emacs nil)
#+end_src

** ChatGPT in emacs
In this elisp code, `with-temp-buffer` creates a temporary buffer for reading the contents of the file. `insert-file-contents` reads the contents of the file into the buffer. `string-trim` removes any whitespace characters at the beginning and end of the buffer's contents, and the resulting string is set to the variable `gptel-api-key`.
A chatGPT key can be generated here: https://platform.openai.com/account/api-keys.
#+begin_src emacs-lisp :tangle config.el
(use-package! gptel
 :config
; (setq! gptel-api-key "write out api key here")) ; alternatively the api key can be added here
(with-temp-buffer
  (insert-file-contents "~/Stack/Code/OpenAI/api_key")
  (setq! gptel-api-key (string-trim (buffer-string)))))
#+end_src

** Custom keybindings
Emacs and Doom Emacs use a lot of keybindings. I try not to interfere with those and add a few of my own.

#+begin_src emacs-lisp :tangle config.el
(map! :leader
    (:prefix ("d" . "Prutserdt Bindings")
        (:prefix ("a" . "Aduino IDE")
            :desc "ESP32 PWRSTRK testing upload" "t" #'PowerStrike-testing-upload
            :desc "ESP32 PWRSTRK upload"         "p" #'PowerStrike-upload
            :desc "ESP32 serial"                 "s" #'serial-ttyUSB0-115200)
        (:prefix ("b" . "Buffer options")
            :desc "Open a buffer"                "o" #'buffer-menu)
    :desc "Open recent files"                    "o" #'counsel-recentf
    :desc "Reload Doom: doom/reload"             "r" #'doom/reload
    :desc "Tangling: org-babel-tangle"           "t" #'org-babel-tangle
    :desc "Plak keuze uit kill ring"             "p" #'consult-yank-from-kill-ring
    :desc "Write this buffer to file"            "z" #'write-file)
    (:prefix ("r" . "org-roam") ;; similar to Doom default, SPC n r. Slightly shorter as: SPC r
        :desc "Open random node"                 "a" #'org-roam-node-random
        :desc "Open new daily"                   "d" #'org-roam-dailies-capture-today
        (:prefix ("D" . "dailies")
            :desc "Find daily dir"               "-" #'org-roam-find-directory
            :desc "Goto previous note"           "b" #'org-roam-dailies-goto-previous-note
            :desc "Goto date"                    "d" #'org-roam-dailies-goto-date
            :desc "Capture date"                 "D" #'org-roam-dailies-capture-date
            :desc "Goto next note"               "f" #'org-roam-dailies-goto-next-note
            :desc "Goto tomorrow"                "m" #'org-roam-dailies-goto-tomorrow
            :desc "Capture tomorrow"             "M" #'org-roam-dailies-capture-tomorrow
            :desc "Goto today"                   "t" #'org-roam-dailies-goto-today
            :desc "Capture today"                "T" #'org-roam-dailies-capture-today
            :desc "Goto yesterday"               "y" #'org-roam-dailies-goto-yesterday
            :desc "Capture yesterday"            "Y" #'org-roam-dailies-capture-yesterday)
        :desc "Find node"                        "f" #'org-roam-node-find
        :desc "Find ref"                         "F" #'org-roam-ref-find
        :desc "Show graph"                       "g" #'org-roam-graph
        :desc "Insert node"                      "i" #'org-roam-node-insert
        :desc "Capture to node"                  "n" #'org-roam-capture
        :desc "Toggle roam buffer"               "r" #'org-roam-buffer-toggle
 ;;       :desc "Launch roam buffer"               "R" #'org-roam-buffer
        :desc "Launch roam buffer"               "R" #'org-roam-buffer-display-dedicated
        :desc "Sync database"                    "s" #'org-roam-db-sync
        :desc "UI in browser"                    "u" #'org-roam-ui-mode)
    (:prefix ("s")
        (:prefix ("c" . "ChatGPT options")
            :desc "ChatGPT"                      "c" #'gptel
            :desc "send"                         "s" #'gptel-send
            :desc "rewrite"                      "r" #'gptel-rewrite-menu
            :desc "menu"                         "m" #'gptel-menu)))
#+end_src

** Org-mode configuration
Setup to use sql in org code blocks.
#+begin_src emacs-lisp :tangle config.el
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)))
#+end_src

More eye candy by superstar bullets in org mode instead of the default ~*~. This requires (org +pretty) in ~init.el~.
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-headline-bullets-list '("◉" "○" "✿" "✸" "⁖" ))
#+end_src

Setting the size of the headers in org mode, ordered by the level of course.
#+begin_src emacs-lisp :tangle config.el
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

Hide the emphasis markup for: /italic/, *bold*, ~code~, _underscore_, =verbatim= and +strikethrough+.
#+begin_src emacs-lisp :tangle config.el
(setq org-hide-emphasis-markers t)
#+end_src

Automatically tangling by the org-auto-tangle package.
#+begin_src emacs-lisp :tangle config.el
(use-package org-auto-tangle
  :load-path "site-lisp/org-auto-tangle/"    ;; this line is necessary only if you cloned the repo in your site-lisp directory
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

Assign some org files that will be used for org-agenda. At this moment I'm testing, not sure if I will keep using it.
#+begin_src emacs-lisp :tangle config.el
(setq org-agenda-files
      '("~/Stack/Command_line/RoamNotes"))
;;      '("~/Stack/Code/Emacs/Tasks.org"))
#+end_src

** Org-roam configuration
~org-roam~ is a plain text knowledge management system. Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.
The directory is set where the atomic files will be stored.
#+begin_src emacs-lisp :tangle config.el
(use-package org-roam
  :ensure t
  :custom
 ;(org-roam-directory "~/Shared_directory/RoamNotes")    ; directory on Virtualbox Arch image
  (org-roam-directory "~/Stack/Command_line/RoamNotes")  ; directory on Arch linux
  (org-roam-dailies-directory "daily/")                  ; the subdir for dailies in roam-dir
  :config
  (org-roam-setup))
#+end_src

** Org-Roam-ui configuration
~org-roam-ui~ is a graphical front end for org-roam. It will open a browser for exploring and interacting with your org-roam notes.

#+begin_src emacs-lisp :tangle config.el
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

A piece of custom lisp code to debug/upload my test Arduino code to a ESP32 processor and move windows around to make Emacs a comfy IDE. Remark: (interactive) is needed to be able to run with hotkeys.
#+begin_src emacs-lisp :tangle config.el
(defun PowerStrike-testing-upload ()
  (interactive)
  (async-shell-command "arduino --board esp32:esp32:esp32 --port /dev/ttyUSB0 --upload ~/Stack/Code/git/PowerStrike_code/testing/testing.ino"
  (doom/window-maximize-buffer)
  (split-window-horizontally)
  (switch-to-buffer "*Async Shell Command*")
  (windmove-right)))
#+end_src

Another piece of custom Elisp code. Again Emacs is used as a comfortable IDE, here the serial output of ttyUSBo at 115200 baudrate is spit into an emacs buffer.
#+begin_src emacs-lisp :tangle config.el
(defun serial-ttyUSB0-115200 ()
  (interactive)
  (split-window-horizontally)
  (serial-term "/dev/ttyUSB0" 115200)
;;(switch-to-buffer "/dev/ttyUSB0")
  (windmove-right))
#+end_src
TODO: I would like to run ~serial-ttyUSB0-115200~ directly after ~PowerStrike-testing-upload~ , but did not figure out how to do this. I tried to close the *Async Shell Command* window when it generates the output "Hard resettign via RTS pin." but this did not work.

* Code snippets
Code snippets can automate lots of stuff. Here below is an example. In org-mode <p tab will insert the following snippet:
#+begin_src snippet :tangle snippets/org-mode/PythonBlock
# -*- mode: snippet -*-
# name: PythonBlock
# key: <p
# --
#+begin_src python :tangle ${2:wismij}.py :results output
# NOTE, this file is generated from the org file:
# `(file-name-nondirectory (buffer-file-name))`
# Only modify the org file and not this Python file.

$0
#+end_sr${1:c}
#+end_src

Remark: Github cannot handle a code block inside a codeblock. The line ~#+begin_src python :tangle ${2:wismij}.py :results output~ under the line ~# --~ is actually in this README.org file but not showing on the Github page. Also the bottom line ~#+end_sr${1:c}~ is not showing on the github page. Check the [[https://raw.githubusercontent.com/Prutserdt/dotfiles/master/.doom.d/README.org][raw README.org]] file for that.

* Credits
My configuration of Doom Emacs is partially based on these ones.
- :book:   https://gitlab.com/zzamboni/dot-doom
- :book:   https://gitlab.com/dwt1/dotfiles/-/tree/master/.emacs.d.gnu
- :book: https://systemcrafters.net/
