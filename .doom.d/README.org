#+TITLE: My configuration of Emacs
#+STARTUP: showeverything
#+STARTUP: inlineimages
#+AUTHOR: Prutserdt

#+CAPTION: Doom Emacs
#+ATTR_HTML: :alt Doom Emacs :title Doom Emacs :align left
[[https://github.com/Prutserdt/dotfiles/raw/master/.doom.d/doom-emacs.png]]

* Table Of Contents :toc:
- [[#about-this-config][About this config]]
- [[#initel][init.el]]
- [[#packagesel][packages.el]]
- [[#configel][config.el]]
- [[#todos][TODOs]]
- [[#credits][Credits]]

* About this config
This is my personal [[https://github.com/hlissner/doom-emacs][Doom Emacs]] config. Nothing much to see here. Just started this journey and learning [[https://www.gnu.org/software/emacs/][Emacs]] and [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] along the way. The Emacs Lisp files [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/init.el][init.el]], [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/packages.el][packages.el]] and [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/config.el][config.el]] are generated from [[https://github.com/Prutserdt/dotfiles/blob/master/.doom.d/README.org][this README.org file]] by tangling in Emacs ='M-x' 'org-babel-tangle' RET=. Remember to run =~/.emacs.d/bin/doom sync= in the terminal after modifications!

* init.el
This file controls what Doom modules are enabled and what order they load in.

The list of modules can be checked in Doom Emacs by ~M-x~ ~Doom/help-modules~ and added to this list if needed.

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; NOTE This file is generated from the README.org file. Do not alter
;; init.el directly and only modify the README.org file in emacs by
;; 'M-x' 'org-babel-tangle' RET and run $ '~/.emacs.d/bin/doom sync'

(doom! :completion
       company           ; the ultimate code completion backend
       vertico           ; the search engine of the future

       :ui
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       (emoji +unicode)  ; ð
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ophints           ; highlight the region an operation acts on
       (popup +defaults) ; tame sudden yet inevitable temporary windows
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       fill-column       ; a `fill-column' indicator
       workspaces        ; tab emulation, persistence & separate workspaces

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       snippets          ; my elves. They type so I don't have to

       :emacs
       (dired +icons)    ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and :Emacs, sitting in a tree

       :term
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax            ; tasing you for every semicolon you forget

       :tools
       (eval +overlay)   ; run code, run (also, repls)
       lookup            ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs

       :lang
       emacs-lisp        ; drown in parentheses
       markdown          ; writing docs for people to ignore
       (org +pretty)     ; organize your plain life in plain text
       (python +lsp
        +pyright)        ; beautiful is better than ugly
       sh                ; she sells {ba,z,fi}sh shells on the C xor

       :app

       :config
       (default +bindings +smartparens)
       )
#+end_src

* packages.el
Here the packages are defined which should be installed. This is an addition to the already installed and loaded modules of ~init.el~.

Uitleg hier over onderstaande package gedeelte ........
#+begin_src emacs-lisp :tangle packages.el

;; -*- no-byte-compile: t; -*-

;; NOTE This file is generated from the README.org file. Do not alter
;; packages.el directly and only modify the README.org file in emacs by
;; 'M-x' 'org-babel-tangle' RET and run $ '~/.emacs.d/bin/doom sync'

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src

Disable the nose package because it is not maintained and leading to an ~:lang python error~
#+begin_src emacs-lisp :tangle packages.el
(package! nose :disable t)
#+end_src

Load the beacon package. This is not part of the Doom Emacs modules. /Never lose your cursor again/ by highlighting the cursor after scrolling.
#+begin_src emacs-lisp :tangle packages.el
;; Help finding the cursor
(package! beacon)
#+end_src

Wrapping lines at fill-column and centering text.. uitleg hier........
#+begin_src emacs-lisp :tangle packages.el
(package! visual-fill-column)
#+end_src

* config.el
The custom configurations are set here. For instance theme settings, image to the doom splash screen, transparency, relative numbering and email settings.

Add a NOTE to ~config.el~ to highlight that this file should not be edited directly.

#+begin_src emacs-lisp :tangle config.el

;; NOTE This file is generated from the README.org file. Do not alter
;; config.el directly and only modify the README.org file in emacs by
;; 'M-x' 'org-babel-tangle' RET and reload by 'M-x' 'doom/reload' RET

;; Hide the toolbar
;; (tool-bar-mode -1)
#+end_src

The default setting of Evil mode in Doom Emacs is to use Y in normal mode to yank the whole line from the cursor position. This is obviously the *incorrect* way and is reverted here.

#+begin_src emacs-lisp :tangle config.el

(setq! evil-want-Y-yank-to-eol nil)
#+end_src

The doom-emacs image of the welcome screen is added here
#+begin_src emacs-lisp :tangle config.el

(setq fancy-splash-image "~/.doom.d/doom-emacs.png")
#+end_src

The transparency is set to a low level not too distract too much with the desktop background.
#+begin_src emacs-lisp :tangle config.el

(set-frame-parameter (selected-frame) 'alpha '(95 90))
(add-to-list 'default-frame-alist '(alpha 95 90))
#+end_src

Finding the cursor is sometimes tricky while scrolling. The beacon module helps by highlighing the cursor area after scrolling! /Never lose your cursor again/
#+begin_src emacs-lisp :tangle config.el

(beacon-mode 1)
(setq beacon-blink-duration 3)
#+end_src

Make the normal/insert/visual states more apparent by changing cursor:
#+begin_src emacs-lisp :tangle config.el

(setq evil-normal-state-cursor '(box "tomato")
      evil-insert-state-cursor '(bar "white")
      evil-visual-state-cursor '(hollow "orange"))
#+end_src

Let's use some nice bullets in org mode, and not the default boring *. This reequires (org +pretty) in ~init.el~.
#+begin_src emacs-lisp :tangle config.el

(setq org-superstar-headline-bullets-list '("◉" "○" "✿" "✸" "⁖" ))
#+end_src

The flashing of yanked text can be set to a longer interval. The default is 0.2 and I prefer to use 1 second.
#+begin_src emacs-lisp :tangle config.el

(setq evil-goggles-duration 1.0)
#+end_src

Rainbow delimiters, help to find the matching parenthesis. This is very handy for the parenthis galore Elisp language.
#+begin_src emacs-lisp :tangle config.el

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :hook (org-mode . rainbow-delimiters-mode)
  )
#+end_src

The Hack font is set here
#+begin_src emacs-lisp :tangle config.el

(set-frame-font "Hack 12" t t)
(setq default-frame-alist '((font . "Hack 13")))
#+end_src

For ultrawide monitors I prefer to set my working window in the middle of screen. In my case I use qtile window manager with monadthreecolumn and emacs as centered master. With visual-fill emacs is set to be in the middle of the window. This is nice for three column layout and especially nice on ultrawides in a maximized window. Then it is now perfectly in the middle and distraction free.
#+begin_src emacs-lisp :tangle config.el

(setq-default fill-column 110)
(global-display-fill-column-indicator-mode)
(add-hook 'visual-line-mode-hook 'visual-fill-column-mode)
(setq-default visual-fill-column-center-text t)
#+end_src

Set relative numbering. 'SPC' 't'  'l'
#+begin_src emacs-lisp :tangle config.el

(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src

Some *keybindings* are added to the ~config.el~.
It's easy to check if a key binding is available by........

#+begin_src emacs-lisp :tangle config.el

;; List of recently opened files:
(global-set-key "\C-h" 'recentf-open-more-files)

;; org babel tangle
;;(global-set-key "\C-h" 'recentf-open-more-files)

#+end_src

* TODOs
Here is a list of things I want to add/improve in my Doom Emacs configuration.

*Create custom welcome screen (splash screen)*

Would be nice to change it, modifying the default requires too much effort. Just create a simple page with an image and a few options shoudl be relatively simple....

*MU4e*

Needs to be configured properly...
mu4e should be added to ~init.el~ (mu4e +org +gmail) and/or the mu4e package should be added to ~package.el~:

#+begin_src emacs-lisp

;; The email package MU for emacs
(package! mu4e)

#+end_src

The following code block should be part of config.el:
#+begin_src emacs-lisp

(setq mail-user-agent 'mu4e-user-agent)
(set-email-account!
 "transip"
 '((mu4e-sent-folder       . "/transip/Sent Mail")
   (mu4e-trash-folder      . "/transip/Bin")
   (smtpmail-smtp-user     . "email@adress.com"))
 t)
(setq mu4e-get-mail-command "mbsync transip "
    ;; get emails and index every 5 minutes
      mu4e-update-interval 300
      ;; send emails with format=flowed
      mu4e-compose-format-flowed t
      ;; no need to run cleanup after indexing for gmail
      mu4e-index-cleanup nil
      mu4e-index-lazy-check t
      ;; more sensible date format
      mu4e-headers-date-format "%d.%m.%y")
;; tell message-mode how to send mail
(setq message-send-mail-function 'smtpmail-send-it)
;; if our mail server lives at smtp.example.org; if you have a local
;; mail-server, simply use 'localhost' here.
(setq smtpmail-smtp-server "smtp.transip.email")

#+end_src

* Credits
My configuration of Doom Emacs is partially based on these ones.
- :book: https://gitlab.com/zzamboni/dot-doom
- :book: https://gitlab.com/dwt1/dotfiles/-/tree/master/.emacs.d.gnu
