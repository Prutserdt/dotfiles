#+TITLE: README.org
#+startup: inlineimages

* Inhoudsopgave:toc:
- [[#powerstrike][PowerStrike]]
- [[#onderdelen-lijst][Onderdelen lijst]]
- [[#opbouw-van-het-prototype][Opbouw van het prototype]]
- [[#powerstrikeino-software][PowerStrike.ino software]]
- [[#vorige-software-versies][Vorige software versies]]

* PowerStrike
We zijn bezig met het ontwikkelen van een prototype mma glove met ingebouwede druksensoren.

Onze TODO lijst [4/10]
 - [X] Live meten van een klap dmv een druksensor.
 - [X] Meten van meerdere druksensoren naast elkaar.
 - [X] Speel een tune en geef retro boot screen.
 - [X] Maximum geslagen: geef een piep (hoe harder hoe hoger de toon).
 - [ ] Inbouwen van een druksensor in een mma handschoen.
 - [ ] Testsen van de handschoen in de dojo.
 - [ ] Uitvoerig de robuustheid testen in de dojo
 - [ ] Meerdere sensoren in een mma handschoen inbouwen en testen.
 - [ ] Uitfigulieren hoe we communicatie gaan doen vanuit de handschoen?
 - [ ] Miniaturiseren van hardware.


* Onderdelen lijst

1. Arduino Uno R3
2. Breadboard
3. 2* FSR 50 kg
4. LCD scherm (16*2)
5. 2* 1 Mega-ohm weerstand
6. Piezo buzzer

* Opbouw van het prototype

Het systeem is op deze manier opgebouwd.
#+CAPTION: picture
#+ATTR_HTML: :width 300px
[[https://github.com/Prutserdt/dotfiles/blob/master/Arduino/PowerStrike/picture.jpg]]

Schematische ziet dat er zo uit (excuses voor de slechte uitlijning):
#+CAPTION: scheme
#+ATTR_HTML: :width 300px
[[https://github.com/Prutserdt/dotfiles/blob/master/Arduino/PowerStrike/scheme.jpg]]

Opmerking: waarschijnlijk moeten er capacitors gebruikt worden want er is nu een probleem. Als een FSR wordt ingedrukt dan is er ook een signaal in de andere FSR, dit moet nog opgelost worden. Ook valt de LCD even uit als de piezo buzzer gebruikt wordt (bij maximum druk), dit is hetzelfde probleem, waarschijnlijk op te lossen met een capacitor.

* PowerStrike.ino software

Versie 0.07 is uit!

#+begin_src C :tangle ~/Arduino/PowerStrike/PowerStrike.ino




/* PowerStrike v0.07.
 * Twee FSR druk sensoren met live output op een LCD scherm en naar de serial monitor
 * plus was beeps en Rocky tune via de piezo buzzer.*/

#include <LiquidCrystal.h> //Importeer de LCD library

LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins
//#include <ezButton.h>

// Definieer de constanten
#define NOTE_E5 659       // Toonhoogte en bijbehorende frequentie voor piezo buzzer
#define NOTE_G5 784
#define NOTE_C5 523
#define NOTE_D5 587
#define NOTE_A5 880
#define NOTE_B5 988
#define PowerStrikepin0 A0 // Arduino pin voor druksensor 0
#define PowerStrikepin1 A1 // Arduino pin voor druksensor 1
#define bzzr 8             // Arduino pin voor de Piezo buzzer
#define contra 9           // Arduino pin voor het contrast van de LCD
#define bri 10             // Arduino pin voor de brightness van het LCD


// Definieer de variabelen
int PowerStrikereading0;   // Variabele voor uitlezen druksensor op pin 0
int PowerStrikereading1;   // Variabele voor uitlezen druksensor op pin 1
int maximum0;              // Variabele die de maximale kracht bijhoud
int maximum1;              // Variabele die de maximale kracht bijhoud
int schakelaar_pin = 13;   // Schakelaar


String scheld[] = {"~~~~ zucht ~~~~~", "~~~~ slapjes ~~~~", "Beetje harder...",
                   "~~~~~ gaap ~~~~~", "~~~~~ hmmmm ~~~~~", "~~~~ och och ~~~",
                   "~~~~ zzzzz ~~~~~", "~~~~~ tssss ~~~~~", "~~~rozenwater~~~",
                   "~~ natte krant ~", "~~ master Ken ~~~", "~~   aikido   ~~",
                   "~~~ slapjanus ~~", "~~ kussenvuist ~~", "~~~ weakling ~~~",
                   "~~~pillow fist~~", "~~~~~ snurk ~~~~~", "~~~ luiwammes ~~",
                   "~~~~ slome ~~~~~", "~~ kom op man ~~~",
                 }; // scheld Array
int scheldAantal = *(&scheld + 1) - scheld; // Variabele die de lengte is van aantal strings in scheld array

String hulde[] = {"!!    RECORD    !!", "BEAUTIFUL CHAMP!", "GOODNIGHT IRENE!",
                  "      EPICO       ", "          AAAUW!", "     SHA-BAM!   ",
                  "KABOOSH!          ", "       BOOM     "
                   }; // hulde Array
int huldeAantal = *(&hulde + 1) - hulde; // Variable die de lengte is van aantal strings in hulde


// Tune: jingle all the way:
int jingleNoten[] = {
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
  NOTE_E5,
};
// toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
int jingleTijdPerNoot[] = {
  32, 32, 32, 32,
  8,
};
int sizeOfJingle=sizeof(jingleTijdPerNoot);

// Tune: Gonna fly now, Rocky Tune
int rockyNoten[] = {
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
};
int rockyTijdPerNoot[] = {
  32, 32, 32, 16, 2,              // toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
};
int sizeOfRocky=sizeof(rockyTijdPerNoot);


// Functies
void muziek(int noten[], int tijden[], int grootte) {
  // Muziek functie. Invoer van twee arrays: de noten en de tijden per noot
    int size = grootte / sizeof(int);
  //NOTE: int size = sizeof(tijden) / sizeof(int); werkt NIET!!!
  //Blijkbaar lukt het niet of sizeof(tijden)te berekenen.
  //Bovenstaande oplossing is niet elegant maar werk nu wel....

  for (int dezeNoot = 0; dezeNoot < size; dezeNoot++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int nootDuur = 1000 /tijden[dezeNoot];     // hier wordt de tijd van de noot berekend, in ms
    tone(bzzr, noten[dezeNoot], nootDuur);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    int pauzeTussenNoten = nootDuur * 1.30;   // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    delay(pauzeTussenNoten);
    noTone(bzzr);                             // stop de tune:
  }
}


void tik(unsigned char delayms){
  // Tik geven via de piezo buzzer, deze is in te stellen; tik(10) geeft 10 ms delay
  analogWrite(8, 255);     // schrijf naar pin 8, volume: gebruik waarden tussen 0-255,
  delay(delayms);          // wacht voor een delay in ms
  analogWrite(8, 0);       // 0 zet het uit
  delay(delayms);          // wacht voor een delay in ms
}


void tikken(int count){
  // Herhalen van tik, tikkerdetik
    while ( count-- )
    {
      tik(20);             // 20 ms is nu de duur van de tik die gegeven wordt, zie functie tik
    }
}


void elcede(int regel, int spatie, String a, int b){
  // funtie voor de invoer van output naar LCD
  lcd.setCursor(regel, spatie);
  lcd.print(a);
  lcd.print(b);
}


void elcedeboot(String a, String b){
  // De elcede functie, input is bovenste en onderste regel.
  lcd.setCursor(0, 0);     // Bovenste regel
  lcd.print(a);
  lcd.setCursor(0, 1);     // Onderste regel
  lcd.print(b);
  delay(500);              // De delay van de loop in milliseconden.
  tik(10);                 // Een enkele korte tik (10 is in ms)
}


void setup() {
  Serial.begin(9600);      // Zet serial communicatie op 9600 baud:
  maximum0=0;              // Zet het maximum op 0
  maximum1=0;              // Zet het maximum op 0

  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)

  // Stukje amusement
  muziek(rockyNoten,rockyTijdPerNoot,sizeOfRocky);// Rocky tune :-)
  // Boot screen: alsof deze retesnelle code een significante boot tijd heeft
  elcedeboot("**PowerStrike**", "Booting in ");   // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 3");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 2");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 1");  // Run de elcedeboot functie met deze text
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
  elcedeboot("  Tijd om te", "!!!!!RAMMEN!!!!!"); // Run de elcedeboot functie met deze text
  tikken(10);                                     // Tikken met de Piezo buzzer
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel

  pinMode(schakelaar_pin, INPUT);                 // Schakelaartje

}


void loop() {
  lcd.clear(); // Clear LCD anders krijg je trailing rommel
               // TODO: padding programmeren, dat is beter dan dit lcd geflits...

  PowerStrikereading0 = analogRead(PowerStrikepin0); // Lees PowerStrike pin en save als variabele
  PowerStrikereading1 = analogRead(PowerStrikepin1); // Lees PowerStrike pin en save als variabele


//FIXME: onderstaande IF blocks is spaghetti code, dit kan beter en in minder SLOCs.
if (PowerStrikereading0+PowerStrikereading1  < 301){ // Deze lage waarden zijn geen maximum waardig
    elcede(0,0,"L0:",PowerStrikereading0);
    elcede(9,0,"L2:",PowerStrikereading1);
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);
 } else if (PowerStrikereading0+PowerStrikereading1  > 300){
    // als bovenstaande treshhold is gehaald dan een scheld tekst in LCD weergeven
    int scheldNummer = (rand() % scheldAantal) ;   // Kies een random nummer om scheldwoord te kiezen
    String scheldStr = (scheld[scheldNummer]);     // Maak scheldwoord string aan
    lcd.clear();                                   // Clear LCD anders krijg je trailing rommel
    elcede(0,0,scheldStr, 1);                      // Scheld op de LCD
    elcede(0,1,"M0:",maximum0);                    // Blijf maximum weergeven
    elcede(9,1,"M1:",maximum1);                    // Blijf maximum weergeven
    tik(10);                 // Een enkele korte tik (10 is in ms)
  if (PowerStrikereading0 > maximum0) {
    maximum0=PowerStrikereading0;                  // Maximum gevonden dus overschrijven
    tone(bzzr, 50+150*log(maximum0), 1000/4);      // Hoe hoger het maximum hoe hoger de toon, log functie
    int huldeNummer = (rand() % huldeAantal) ;     // Maakt random nummer die we gaan gebruiken voor hulde
    String huldeStr = (hulde[huldeNummer]);        // Kies de random hulde
    lcd.clear();                                   // Clear LCD anders krijg je trailing rommel
    elcede(0,0,huldeStr, 1);                       // Geef hulde weer op LCD
    elcede(0,1,"M0:",maximum0);                    // Blijf maximum weergeven
    elcede(9,1,"M1:",maximum1);                    // Blijf maximum weergeven
    }
  if (PowerStrikereading1 > maximum1) {
    maximum1=PowerStrikereading1;                  // Maximum gevonden dus overschrijven
    delay(200);                                    // Pauze, zodat je de piep van  bovenstaande functie eerst hoort
    tone(bzzr, 50+150*log(maximum1), 1000/8);      // Hoe hoger het maximum hoe hoger de toon, log functie
    int huldeNummer = (rand() % huldeAantal) ;     // maakt random nummer die we gaan gebruiken voor text
    String huldeStr = (hulde[huldeNummer]);        // kies de random hulde
    lcd.clear();                                   // Clear LCD anders krijg je trailing rommel
    elcede(0,0,huldeStr, 1);                       // Knal hulde op LCD
    elcede(0,1,"M0:",maximum0);                    // Blijf maximum weergeven
    elcede(9,1,"M1:",maximum1);                    // Blijf maximum weergeven
  }
 }

  // Print output ook naar de serial monitor. Want, waarom niet?
  Serial.print("LIVE = ");             // Aangeven dat dit de 'Live' waarden zijn
  Serial.print(PowerStrikereading0);   // 'Live' A waarde
  Serial.print(", ");                  // spacer
  Serial.print(PowerStrikereading1);   // 'Live' B waarde
  Serial.print("   MAX = ");           // Aangeven dat dit de Max waarden zijn
  Serial.print(maximum0);              // Maximum van A
  Serial.print(", ");                  // spacer
  Serial.println(maximum1);            // Maximum van B
  delay(500); // De delay van deze loop, in ms.

  // Schakelaartje om snel ff de maxima op nul te zetten
  // FIXME: onderstaande spaghetti code nog opschonen
  if(digitalRead(schakelaar_pin) == HIGH){
    maximum0=maximum1=0;
    lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
    elcedeboot("  Resetten van", "  alle maxima!"); // Run de elcedeboot functie met deze text
    tikken(2);
    delay(20);                                      // De delay van deze loop, in ms.
    tikken(2);                                      // De delay van deze loop, in ms.
    delay(20);                                      // De delay van deze loop, in ms.
    muziek(jingleNoten,jingleTijdPerNoot,sizeOfJingle);// Rocky tune :-)
    delay(20);                                      // De delay van deze loop, in ms.
    tikken(2);
    delay(20);                                      // De delay van deze loop, in ms.
    tikken(2);
    lcd.clear();
  }

}

}
#+end_src



De onderstaande code is ter referentie. Als we de tune willen aanpassen met andere noten dan weten we de frequenties te vinden voor de piezo buzzer.
#+begin_src C
/*************************************************
   Public Constants
 *************************************************/

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_S1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

#+end_src

* Vorige software versies

#+begin_src C

/* PowerStrike v0.065.
 * Twee FSR druk sensoren met live output op een LCD scherm en naar de serial monitor
 * plus was beeps en Rocky tune via de piezo buzzer.*/

#include <LiquidCrystal.h> //Importeer de LCD library

LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins


// Definieer de constanten
#define NOTE_E5 659       // Toonhoogte en bijbehorende frequentie voor piezo buzzer
#define NOTE_G5 784
#define NOTE_C5 523
#define NOTE_D5 587
#define NOTE_A5 880
#define NOTE_B5  988
#define PowerStrikepin0 A0 // Arduino pin voor druksensor 0
#define PowerStrikepin1 A1 // Arduino pin voor druksensor 1
#define bzzr 8             // Arduino pin voor de Piezo buzzer
#define contra 9           // Arduino pin voor het contrast van de LCD
#define bri 10             // Arduino pin voor de brightness van het LCD


// Definieer de variabelen
int PowerStrikereading0;   // Variabele voor uitlezen druksensor op pin 0
int PowerStrikereading1;   // Variabele voor uitlezen druksensor op pin 1
int maximum0;              // Variabele die de maximale kracht bijhoud
int maximum1;              // Variabele die de maximale kracht bijhoud

// jingle all the way:
int jingleNoten[] = {
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
//  NOTE_E5,
};
// toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
int jingleTijdPerNoot[] = {
  16, 16, 16, 16,
 // 4,
};

// Rocky Tune
int rockyNoten[] = {
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
};
int rockyTijdPerNoot[] = {
  32, 32, 32, 16, 2,              // toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
};


// Functies

void muziek(int noten[], int tijden[]) {
  // Invoer van twee arrays: de noten en de tijden per noot
  // Voorbeeld: muziek(rockyNoten,rockyTijdPerNoot)
  int size = sizeof(tijden) / sizeof(int);

  for (int dezeNoot = 0; dezeNoot < size; dezeNoot++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int nootDuur = 1000 /tijden[dezeNoot];     // hier wordt de tijd van de noot berekend, in ms
    tone(bzzr, noten[dezeNoot], nootDuur);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    int pauzeTussenNoten = nootDuur * 1.30;   // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    delay(pauzeTussenNoten);
    noTone(bzzr);                             // stop de tune:
  }
}

void buzzer() {
  // itereerd over de noten van de melody:
  int size = sizeof(rockyTijdPerNoot) / sizeof(int);

  for (int thisNote = 0; thisNote < size; thisNote++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int noteDuration = 1000 / rockyTijdPerNoot[thisNote];
    tone(bzzr, rockyNoten[thisNote], noteDuration);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop de tune:
    noTone(bzzr);
  }
}




void tik(unsigned char delayms){
  // Tik geven via de piezo buzzer, deze is in te stellen; tik(10) geeft 10 ms delay
  analogWrite(8, 250);     // schrijf naar pin 8, volume: gebruik waarden tussen 0-255,
  delay(delayms);          // wacht voor een delay in ms
  analogWrite(8, 0);       // 0 zet het uit
  delay(delayms);          // wacht voor een delay in ms
}
void tikken(int count){
  // Herhalen van tik, tikkerdetik
    while ( count-- )
    {
      tik(20);             // 20 ms is nu de duur van de tik die gegeven wordt, zie functie tik
    }
}


void elcede(int regel, int spatie, String a, int b){
  // funtie voor de invoer van output naar LCD
  lcd.setCursor(regel, spatie);
  lcd.print(a);
  lcd.print(b);
}


void elcedeboot(String a, String b){
  // De elcede functie, input is bovenste en onderste regel.
  lcd.setCursor(0, 0);     // Bovenste regel
  lcd.print(a);
  lcd.setCursor(0, 1);     // Onderste regel
  lcd.print(b);
  delay(500);              // De delay van de loop in milliseconden.
  tik(10);                 // Een enkele korte tik (10 is in ms)
}


void setup() {
  Serial.begin(9600);      // Zet serial communicatie op 9600 baud:
  maximum0=0;              // Zet het maximum op 0
  maximum1=0;              // Zet het maximum op 0

  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)

//FIXME: de tunes draaien niet meer!!!!
//       wat is er aan de hand met de code?
//       vreemd
 // muziek(jingleNoten,jingleTijdPerNoot);
  muziek(rockyNoten,rockyTijdPerNoot);

 // buzzer();
  // Stukje amusement op de LCD met beeping
  // Alsof deze retesnelle code een significante boot tijd heeft
  elcedeboot("**PowerStrike**", "Booting in ");   // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 3");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 2");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 1");  // Run de elcedeboot functie met deze text
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
  elcedeboot("  Tijd om te", "!!!!!RAMMEN!!!!!"); // Run de elcedeboot functie met deze text
  tikken(10);                                     // Tikken met de Piezo buzzer
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
}


void loop() {
  lcd.clear(); // Clear LCD anders krijg je trailing rommel
               // TODO: padding programmeren, dat is beter dan dit lcd geflits...

  PowerStrikereading0 = analogRead(PowerStrikepin0); // Lees PowerStrike pin en save als variabele
  PowerStrikereading1 = analogRead(PowerStrikepin1); // Lees PowerStrike pin en save als variabele

  //set maxima als deze gevonden worden
  if (PowerStrikereading0 > maximum0) {
    maximum0=PowerStrikereading0;     // Maximum gevonden dus overschrijven
//    muziek(rockyNoten,rockyTijdPerNoot);
    //muziek(rockyNoten,rockyTijdPerNoot);
    tone(8,500+500*1000/maximum0, 1000/4); // Toonhoogte aanpassen naar output
    }
  if (PowerStrikereading1 > maximum1) {
    maximum1=PowerStrikereading1;     // Maximum gevonden dus overschrijven
    tik(200);
  }

  // Print naar LCD
  // Live waarde in de bovenste regel, onderste regel geeft de maxima
    elcede(0,0,"L0:",PowerStrikereading0);
    elcede(9,0,"L2:",PowerStrikereading1);
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);

  // Print output ook naar de serial monitor.
  Serial.print("LIVE = ");             // Aangeven dat dit de 'Live' waarden zijn
  Serial.print(PowerStrikereading0);   // 'Live' A waarde
  Serial.print(", ");                  // spacer
  Serial.print(PowerStrikereading1);   // 'Live' B waarde
  Serial.print("   MAX = ");           // Aangeven dat dit de Max waarden zijn
  Serial.print(maximum0);              // Maximum van A
  Serial.print(", ");                  // spacer
  Serial.println(maximum1);            // Maximum van B
  delay(500); // De delay van deze loop, in ms.
}

   // tone(8,500+500*1000/maximum0, 1000/4); // Toonhoogte aanpassen naar output


#+end_src





#+begin_src C
/* PowerStrike v0.066.
 * Twee FSR druk sensoren met live output op een LCD scherm en naar de serial monitor
 * plus was beeps en Rocky tune via de piezo buzzer.*/

#include <LiquidCrystal.h> //Importeer de LCD library

LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins


// Definieer de constanten
#define NOTE_E5 659       // Toonhoogte en bijbehorende frequentie voor piezo buzzer
#define NOTE_G5 784
#define NOTE_C5 523
#define NOTE_D5 587
#define NOTE_A5 880
#define NOTE_B5  988
#define PowerStrikepin0 A0 // Arduino pin voor druksensor 0
#define PowerStrikepin1 A1 // Arduino pin voor druksensor 1
#define bzzr 8             // Arduino pin voor de Piezo buzzer
#define contra 9           // Arduino pin voor het contrast van de LCD
#define bri 10             // Arduino pin voor de brightness van het LCD


// Definieer de variabelen
int PowerStrikereading0;   // Variabele voor uitlezen druksensor op pin 0
int PowerStrikereading1;   // Variabele voor uitlezen druksensor op pin 1
int maximum0;              // Variabele die de maximale kracht bijhoud
int maximum1;              // Variabele die de maximale kracht bijhoud

// jingle all the way:
int jingleNoten[] = {
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
//  NOTE_E5,
};
// toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
int jingleTijdPerNoot[] = {
  16, 16, 16, 16,
 // 4,
};

// Rocky Tune
int rockyNoten[] = {
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
};
int rockyTijdPerNoot[] = {
  32, 32, 32, 16, 2,              // toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
};


// Functies

void muziek(int noten[], int tijden[]) {
  // Invoer van twee arrays: de noten en de tijden per noot
  // Voorbeeld: muziek(rockyNoten,rockyTijdPerNoot)
  int size = sizeof(tijden) / sizeof(int);

  for (int dezeNoot = 0; dezeNoot < size; dezeNoot++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int nootDuur = 1000 /tijden[dezeNoot];     // hier wordt de tijd van de noot berekend, in ms
    tone(bzzr, noten[dezeNoot], nootDuur);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    int pauzeTussenNoten = nootDuur * 1.30;   // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    delay(pauzeTussenNoten);
    noTone(bzzr);                             // stop de tune:
  }
}

void buzzer() {
  // itereerd over de noten van de melody:
  int size = sizeof(rockyTijdPerNoot) / sizeof(int);

  for (int thisNote = 0; thisNote < size; thisNote++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int noteDuration = 1000 / rockyTijdPerNoot[thisNote];
    tone(bzzr, rockyNoten[thisNote], noteDuration);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop de tune:
    noTone(bzzr);
  }
}




void tik(unsigned char delayms){
  // Tik geven via de piezo buzzer, deze is in te stellen; tik(10) geeft 10 ms delay
  analogWrite(8, 250);     // schrijf naar pin 8, volume: gebruik waarden tussen 0-255,
  delay(delayms);          // wacht voor een delay in ms
  analogWrite(8, 0);       // 0 zet het uit
  delay(delayms);          // wacht voor een delay in ms
}
void tikken(int count){
  // Herhalen van tik, tikkerdetik
    while ( count-- )
    {
      tik(20);             // 20 ms is nu de duur van de tik die gegeven wordt, zie functie tik
    }
}


void elcede(int regel, int spatie, String a, int b){
  // funtie voor de invoer van output naar LCD
  lcd.setCursor(regel, spatie);
  lcd.print(a);
  lcd.print(b);
}


void elcedeboot(String a, String b){
  // De elcede functie, input is bovenste en onderste regel.
  lcd.setCursor(0, 0);     // Bovenste regel
  lcd.print(a);
  lcd.setCursor(0, 1);     // Onderste regel
  lcd.print(b);
  delay(500);              // De delay van de loop in milliseconden.
  tik(10);                 // Een enkele korte tik (10 is in ms)
}


void setup() {
  Serial.begin(9600);      // Zet serial communicatie op 9600 baud:
  maximum0=0;              // Zet het maximum op 0
  maximum1=0;              // Zet het maximum op 0

  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)

//FIXME: de tunes draaien niet meer!!!!
//       wat is er aan de hand met de code?
//       vreemd
 // muziek(jingleNoten,jingleTijdPerNoot);
  muziek(rockyNoten,rockyTijdPerNoot);

 // buzzer();
  // Stukje amusement op de LCD met beeping
  // Alsof deze retesnelle code een significante boot tijd heeft
  elcedeboot("**PowerStrike**", "Booting in ");   // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 3");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 2");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 1");  // Run de elcedeboot functie met deze text
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
  elcedeboot("  Tijd om te", "!!!!!RAMMEN!!!!!"); // Run de elcedeboot functie met deze text
  tikken(10);                                     // Tikken met de Piezo buzzer
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
}


void loop() {
  lcd.clear(); // Clear LCD anders krijg je trailing rommel
               // TODO: padding programmeren, dat is beter dan dit lcd geflits...

  PowerStrikereading0 = analogRead(PowerStrikepin0); // Lees PowerStrike pin en save als variabele
  PowerStrikereading1 = analogRead(PowerStrikepin1); // Lees PowerStrike pin en save als variabele

  //set maxima als deze gevonden worden
  if (PowerStrikereading0 > maximum0) {
    maximum0=PowerStrikereading0;     // Maximum gevonden dus overschrijven
//    muziek(rockyNoten,rockyTijdPerNoot);
    //muziek(rockyNoten,rockyTijdPerNoot);
    tone(8,500+500*1000/maximum0, 1000/4); // Toonhoogte aanpassen naar output
    }
  if (PowerStrikereading1 > maximum1) {
    maximum1=PowerStrikereading1;     // Maximum gevonden dus overschrijven
    tik(200);
  }

  // Print naar LCD
  // Live waarde in de bovenste regel, onderste regel geeft de maxima
    elcede(0,0,"L0:",PowerStrikereading0);
    elcede(9,0,"L2:",PowerStrikereading1);
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);

  // Print output ook naar de serial monitor.
  Serial.print("LIVE = ");             // Aangeven dat dit de 'Live' waarden zijn
  Serial.print(PowerStrikereading0);   // 'Live' A waarde
  Serial.print(", ");                  // spacer
  Serial.print(PowerStrikereading1);   // 'Live' B waarde
  Serial.print("   MAX = ");           // Aangeven dat dit de Max waarden zijn
  Serial.print(maximum0);              // Maximum van A
  Serial.print(", ");                  // spacer
  Serial.println(maximum1);            // Maximum van B
  delay(500); // De delay van deze loop, in ms.
}

   // tone(8,500+500*1000/maximum0, 1000/4); // Toonhoogte aanpassen naar output


#+end_src


#+begin_src C


/* PowerStrike v0.07. FIXME: werkt niet, rond regel 200 een rommeltje
 * Twee FSR druk sensoren met live output op een LCD scherm en naar de serial monitor
 * plus was beeps en Rocky tune via de piezo buzzer.*/

#include <LiquidCrystal.h> //Importeer de LCD library

LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins


// Definieer de constanten
#define NOTE_E5 659       // Toonhoogte en bijbehorende frequentie voor piezo buzzer
#define NOTE_G5 784
#define NOTE_C5 523
#define NOTE_D5 587
#define NOTE_A5 880
#define NOTE_B5 988
#define PowerStrikepin0 A0 // Arduino pin voor druksensor 0
#define PowerStrikepin1 A1 // Arduino pin voor druksensor 1
#define bzzr 8             // Arduino pin voor de Piezo buzzer
#define contra 9           // Arduino pin voor het contrast van de LCD
#define bri 10             // Arduino pin voor de brightness van het LCD


// Definieer de variabelen
int PowerStrikereading0;   // Variabele voor uitlezen druksensor op pin 0
int PowerStrikereading1;   // Variabele voor uitlezen druksensor op pin 1
int maximum0;              // Variabele die de maximale kracht bijhoud
int maximum1;              // Variabele die de maximale kracht bijhoud
String hulde[] = {"~~~~ zucht ~~~~~", "~~~~ slapjes ~~~~","Beetje harder...", "~~~~~ gaap ~~~~~",
                  "~~~~ hmmmm ~~~~~", "~~~~ och och ~~~~","~~~~ zzzzz ~~~~", "~~~~~ tssss ~~~",
                  "~~~rozenwater~~~", "~~ natte krant ~~","~~ master Ken ~~", "~~   aikido   ~~",
                  "~~~ slapjanus ~~", "~~ kussenvuist ~~","~~~ weakling ~~", "~~~pillow fist~~~",
                  "~~~~ snurk ~~~~~", "~~~ luiwammes ~~~","~~~~ slome ~~~~", "~~ kom op man ~~",
                 }; // Hulde Array, maar niet heus
int huldeAantal = *(&hulde + 1) - hulde; // Variable die de lengte is van aantal strings in hulde
// godMode: als een nieuw record is verbroken
String godMode[] = {"!!   RECORD  !!", "BEAUTIFUL CHAMP!", "GOODNIGHT IRENE!", "      EPICO       ",
                    "         AAAUW!", "     SHA-BAM!   ", "KABOOSH!        ", "       BOOM       "
                   }; // godMode Array
int godModeAantal = *(&godMode + 1) - godMode; // Variable die de lengte is van aantal strings in godMode




// jingle all the way:
int jingleNoten[] = {
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
  NOTE_E5,
};
// toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
int jingleTijdPerNoot[] = {
  16, 16, 16, 16,
  4,
};
int sizeOfJingle=sizeof(jingleTijdPerNoot);

// Rocky Tune
int rockyNoten[] = {
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
  NOTE_E5, 0, NOTE_G5, 0, NOTE_A5,
  NOTE_A5, 0, NOTE_B5, 0, NOTE_G5,
};
int rockyTijdPerNoot[] = {
  32, 32, 32, 16, 2,              // toonduur: 4 = kwart noot, 8 = achtste noot, enzc, oftewel het tempo:
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
  32, 32, 32, 16, 2,
};
nt sizeOfRocky=sizeof(rockyTijdPerNoot);


// Functies
void muziek(int noten[], int tijden[], int grootte) {
  // Invoer van twee arrays: de noten en de tijden per noot
  // Voorbeeld: muziek(rockyNoten,rockyTijdPerNoot)
    int size = grootte / sizeof(int);
  //NOTE: de volgende regel geeft een error en dan werkt deze
  //      functie niet. Vreemd...fout gevonden, die staat hierboven...
  //int size = sizeof(tijden) / sizeof(int); deze werkt NIET!!!
  //Blijkbaar lukt het niet of sizeof(tijden)te berekenen....

  for (int dezeNoot = 0; dezeNoot < size; dezeNoot++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int nootDuur = 1000 /tijden[dezeNoot];     // hier wordt de tijd van de noot berekend, in ms
    tone(bzzr, noten[dezeNoot], nootDuur);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    int pauzeTussenNoten = nootDuur * 1.30;   // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    delay(pauzeTussenNoten);
    noTone(bzzr);                             // stop de tune:
  }
}


void buzzer() {
  // itereerd over de noten van de melody:
  int size = sizeof(rockyTijdPerNoot) / sizeof(int);

  for (int thisNote = 0; thisNote < size; thisNote++) {
    // bereken de toonduur, neem een seconde gedeelt door noot type.
    // toonduurs: kwart noot= 1000 / 4, achtste note = 1000/8, enz
    int noteDuration = 1000 / rockyTijdPerNoot[thisNote];
    tone(bzzr, rockyNoten[thisNote], noteDuration);

    // om de onafhankelijke noten goed te horen moet er een korte pauze tussen zitten.
    // Hier heb ik de tijd van de noot  + 30% genomen, dat werkt:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop de tune:
    noTone(bzzr);
  }
}


void tik(unsigned char delayms){
  // Tik geven via de piezo buzzer, deze is in te stellen; tik(10) geeft 10 ms delay
  analogWrite(8, 250);     // schrijf naar pin 8, volume: gebruik waarden tussen 0-255,
  delay(delayms);          // wacht voor een delay in ms
  analogWrite(8, 0);       // 0 zet het uit
  delay(delayms);          // wacht voor een delay in ms
}


void tikken(int count){
  // Herhalen van tik, tikkerdetik
    while ( count-- )
    {
      tik(20);             // 20 ms is nu de duur van de tik die gegeven wordt, zie functie tik
    }
}


void elcede(int regel, int spatie, String a, int b){
  // funtie voor de invoer van output naar LCD
  lcd.setCursor(regel, spatie);
  lcd.print(a);
  lcd.print(b);
}


void elcedeboot(String a, String b){
  // De elcede functie, input is bovenste en onderste regel.
  lcd.setCursor(0, 0);     // Bovenste regel
  lcd.print(a);
  lcd.setCursor(0, 1);     // Onderste regel
  lcd.print(b);
  delay(500);              // De delay van de loop in milliseconden.
  tik(10);                 // Een enkele korte tik (10 is in ms)
}


void setup() {
  Serial.begin(9600);      // Zet serial communicatie op 9600 baud:
  maximum0=0;              // Zet het maximum op 0
  maximum1=0;              // Zet het maximum op 0

  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)

  muziek(rockyNoten,rockyTijdPerNoot,sizeOfRocky);
//buzzer();
//muziek(jingleNoten,jingleTijdPerNoot,sizeOfJingle);

  // Stukje amusement op de LCD met beeping
  // Alsof deze retesnelle code een significante boot tijd heeft
  elcedeboot("**PowerStrike**", "Booting in ");   // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 3");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 2");  // Run de elcedeboot functie met deze text
  elcedeboot("**PowerStrike**", "Booting in 1");  // Run de elcedeboot functie met deze text
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
  elcedeboot("  Tijd om te", "!!!!!RAMMEN!!!!!"); // Run de elcedeboot functie met deze text
  tikken(10);                                     // Tikken met de Piezo buzzer
  lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
}


void loop() {
  lcd.clear(); // Clear LCD anders krijg je trailing rommel
               // TODO: padding programmeren, dat is beter dan dit lcd geflits...

  PowerStrikereading0 = analogRead(PowerStrikepin0); // Lees PowerStrike pin en save als variabele
  PowerStrikereading1 = analogRead(PowerStrikepin1); // Lees PowerStrike pin en save als variabele
  //set maxima als deze gevonden worden



if (PowerStrikereading0+PowerStrikereading1  < 300){
    elcede(0,0,"L0:",PowerStrikereading0);
    elcede(9,0,"L2:",PowerStrikereading1);
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);
 } else if (PowerStrikereading0+PowerStrikereading1  > 300){
    // als bovenstaande treshhold is gehaald dan een (lauwe) hulde tekst in LCD weergeven
    int huldeNummer = (rand() % huldeAantal) ;  // maakt random nummer die we gaan gebruiken voor text
    String huldeStr = (hulde[huldeNummer]);     // kies de random (lauwe) hulde
    int totaal;
    totaal = PowerStrikereading0+PowerStrikereading1;
    String tot;
    tot=String(totaal);
    String output = tot, hulde[huldeNummer];
    lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
    elcede(0,0,output, 1);                    // geef lauwe hulde weer op LCD
   //  elcede(0,0,huldeStr, 1);                    // geef lauwe hulde weer op LCD
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);
//    } else if (PowerStrikereading0=maximum0 or PowerStrikereading1=maximum1){

  if (PowerStrikereading0 > maximum0) {
    maximum0=PowerStrikereading0;               // Maximum gevonden dus overschrijven
    tone(bzzr, 50+150*log(maximum0), 1000/4);   // Hoe hoger het maximum hoe hoger de toon, log functie
    // als record verbroken isdan een godemode tekst in LCD weergeven
    int godModeNummer = (rand() % godModeAantal) ;  // maakt random nummer die we gaan gebruiken voor text
    String godModeStr = (godMode[godModeNummer]);     // kies de random (lauwe) hulde
    lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
    elcede(0,0,godModeStr, 1);                    // geef lauwe hulde weer op LCD
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);


    }
  if (PowerStrikereading1 > maximum1) {
    maximum1=PowerStrikereading1;               // Maximum gevonden dus overschrijven
    delay(200);                                 // Pauze, zodat je de piep van  bovenstaande functie eerst hoort
    tone(bzzr, 50+150*log(maximum1), 1000/8);   // Hoe hoger het maximum hoe hoger de toon, log functie
    int godModeNummer = (rand() % godModeAantal) ;  // maakt random nummer die we gaan gebruiken voor text
    String godModeStr = (godMode[godModeNummer]);     // kies de random (lauwe) hulde
    lcd.clear();                                    // Clear LCD anders krijg je trailing rommel
    elcede(0,0,godModeStr, 1);                    // geef lauwe hulde weer op LCD
    elcede(0,1,"M0:",maximum0);
    elcede(9,1,"M1:",maximum1);
  }
 }
  // Print output ook naar de serial monitor.
  Serial.print("LIVE = ");             // Aangeven dat dit de 'Live' waarden zijn
  Serial.print(PowerStrikereading0);   // 'Live' A waarde
  Serial.print(", ");                  // spacer
  Serial.print(PowerStrikereading1);   // 'Live' B waarde
  Serial.print("   MAX = ");           // Aangeven dat dit de Max waarden zijn
  Serial.print(maximum0);              // Maximum van A
  Serial.print(", ");                  // spacer
  Serial.println(maximum1);            // Maximum van B
  delay(500); // De delay van deze loop, in ms.
}


#+end_src
