#+TITLE: PowerStrike
#+startup: inlineimages

* Table of contents :toc:
- [[#powerstrike][PowerStrike]]
- [[#experimental-03jun22][Experimental, 03JUN22]]
- [[#experimental-06jun22][Experimental, 06JUN22]]
- [[#07jun22-een-tweede-drukmeter-aansluiten][07JUN22: een tweede drukmeter aansluiten...]]
- [[#powerstrike-huidige-versie][PowerStrike, huidige versie]]
- [[#tekenen-van-arduino-afbeelding-met-fitzing-software][Tekenen van Arduino afbeelding met Fitzing software]]

* PowerStrike
We gaan een prototype mma glove bouwen met ingebouwede druksensoren.
Hoe hard is een klap? Dat kan oplopen tot 250 kg. Stel dat dit verdeeld wordt over twee knokkels dan zou je per druksensor 50-100 kg moeten kunnen meten. Dat is mogelijk met de Force Sensor Resistor (POWERSTRIKE) sensoren die je kunt kopen vanaf 4 euro per sensor.
Ik ga 5 sensoren kopen van 50 kg (17 euro) en daarmee testen.


* Experimental, 03JUN22
Testen van de 50 kg POWERSTRIKE kan met een multimeter. Als ik 2000K Ohm kies dan wordt de weerstand lager als ik er hard op knijp, het fluctueerd van 2000-100 ohm (100 als ik hard knijp)


* Experimental, 06JUN22

Arduino aangesloten op de computer via de USB kabel. Ik heb het programma ~arduino~ gebruikt en de volgende schakeling gebruikt.

[[~/Stack/Documenten/PowerStrike/POWERSTRIKE-with-Arduino-wiring-diagram-768x410.png]]
https://www.makerguides.com/PowerStrike-arduino-tutorial/

Daarna heb ik de onderstaande code geupload naar de arduino. Daarvoor moet je Tools/serialmonitor selecteren en dan 9600 baud. Het werkt want ik krijg een reading terug.
#+begin_src C
/* Simple example code for Force Sensitive Resistor (fsr) with Arduino. More info: https://www.makerguides.com */

// Define fsr pin:
#define fsrpin A0

//Define variable to store sensor readings:
int fsrreading; //Variable to store fsr value

void setup() {
  // Begin serial communication at a baud rate of 9600:
  Serial.begin(9600);
}

void loop() {
  // Read the fsr pin and store the output as fsrreading:
  fsrreading = analogRead(fsrpin);

  // Print the PowerStrikereading in the serial monitor:
  // Print the string "Analog reading = ".
  Serial.print("Analog reading = ");
  // Print the fsrreading:
  Serial.print(fsrreading);

  // We can set some threshholds to display how much pressure is roughly applied:
  if (fsrreading < 10) {
    Serial.println(" - No pressure");
  } else if (fsrreading < 200) {
    Serial.println(" - Light touch");
  } else if (fsrreading < 500) {
    Serial.println(" - Light squeeze");
  } else if (fsrreading < 800) {
    Serial.println(" - Medium squeeze");
  } else {
    Serial.println(" - Big squeeze");
  }

  delay(500); //Delay 500 ms.
}


#+end_src

Gespeelt met weerstanden. De donkere weerstand geeft 0-96 als range, waarbij 96 light touch wordt genoemd. Er zijn twee outputs: no pressure en light touch. Light touch is ook een light touch want bij aanraken switched die al aan. Dit is dus de verkeerde weerstand.
Daarna een tweede weerstand gebruik die als max output 130 geeft deze werkt goed met v0.10.

#+begin_src C
/* PowerStrike v0.01. Eerste versie van PowerStrike code. */

// Definieer welke Arduino pin wordt gebruikt voor uitlezen:
#define PowerStrikepin A0

// Definieer de variabele voor opslag van sensor uitlezing:
int PowerStrikereading; //Variabele voor opslag PowerStrike waarde

void setup() {
  // Begin serial communicatie op 9600 baud:
  Serial.begin(9600);
}

void loop() {
  // Lees de PowerStrike pin en sla de output op als PowerStrikereading:
  PowerStrikereading = analogRead(PowerStrikepin);

  // Print de PowerStrikereading in de serial monitor:
  // Print de string "Analoge waarde = ".
  Serial.print("Analoge waarde = ");
  // Print de PowerStrikereading:
  Serial.print(PowerStrikereading);

  // We zetten de grenzen waarbij een nieuw drukniveau is bereikt.
  // Zeer wetenschappelijke omschrijvingen natuurlijk.
  if (PowerStrikereading < 10) {
    Serial.println(" - Chillin. No pressure bruh");
  } else if (PowerStrikereading < 200) {
    Serial.println(" - Weakling. Put some violence in your violence brother. ");
  } else if (PowerStrikereading < 500) {
    Serial.println(" - Light sparring");
  } else if (PowerStrikereading < 800) {
    Serial.println(" - Brawling");
  } else {
    Serial.println(" - Throwing the kitchen sink. Goodnight Irene!");
  }

  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
}

#+end_src

Ik wil een LCD eraan hangen zodat ik output kan krijgen zonder er een pc aan te hangen.

De bedrading en code heb ik gevonden op deze [[https://create.arduino.cc/projecthub/microBob/lcd-liquid-crystal-display-e72c74?ref=search&ref_id=lcd&offset=4][pagina]].

#+begin_src C
/* PowerStrike v0.02. Inclusief LCD. */

#include <LiquidCrystal.h> //Import the LCD library
//Include^
//Init
LiquidCrystal lcd(12, 11, 5, 4, 3, 2); /*Initialize the LCD and
                                        tell it which pins is
                                        to be used for communicating*/

// Definieer welke Arduino pin wordt gebruikt voor uitlezen:
#define PowerStrikepin A0
//Global Var
#define contra 9 //Define the pin that controls the contrast of the screen
#define bri 10 //Define the pin the controls the brightness of the screen
//Both pins are PWM so you can analogWrite to them and have them output a variable value

// Definieer de variabele voor opslag van sensor uitlezing:
int PowerStrikereading; //Variabele voor opslag PowerStrike waarde

void setup() {
  // Begin serial communicatie op 9600 baud:
  Serial.begin(9600);

  // put your setup code here, to run once:
  lcd.begin(16, 2); //Tell the LCD that it is a 16x2 LCD
  pinMode(contra, OUTPUT); //set pin 9 to OUTPUT
  pinMode(bri, OUTPUT); //Set pin 10 to OUTPUT
  //pinMode-ing OUTPUT makes the specified pin output power
  digitalWrite(contra, LOW); /*outputs no power to the contrast pin.
                            this lets you see the words*/
  analogWrite(bri, 255); //Outputs full power to the screen brightness LED
}

void loop() {
  // Lees de PowerStrike pin en sla de output op als PowerStrikereading:
  PowerStrikereading = analogRead(PowerStrikepin);

  // Print de PowerStrikereading in de serial monitor:
  // Print de string "Analoge waarde = ".
  Serial.print("Analoge waarde = ");
  // Print de PowerStrikereading:
  Serial.print(PowerStrikereading);

  // We zetten de grenzen waarbij een nieuw drukniveau is bereikt.
  // Zeer wetenschappelijke omschrijvingen natuurlijk.
  if (PowerStrikereading < 10) {
    Serial.println(" - Chillin. No pressure bruh");
  } else if (PowerStrikereading < 200) {
    Serial.println(" - Weakling. Put some violence in your violence brother. ");
  } else if (PowerStrikereading < 500) {
    Serial.println(" - Light sparring");
  } else if (PowerStrikereading < 800) {
    Serial.println(" - Brawling");
  } else {
    Serial.println(" - Throwing the kitchen sink. Goodnight Irene!");
  }

  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.

  // put your main code here, to run repeatedly:
  lcd.print(" Hello, World!!"); //Output " Hello, World!!" on the first line of the LCD
  lcd.setCursor(0, 1); /*Set the (invisible) cursor on the first place second row of the LCD.
                        Cursor values are 0-indexed, 0 would the be the first place.
                        The cursor coordinates are X,Y coordinates.*/
  lcd.print("16x2 LCD Screen");
  delay(1000); //Wait a second
  for (int l = 0; l < 16; l++) { //For loop. Repeating 16 times
    lcd.scrollDisplayRight(); //Scroll whole screen to the right once
    delay(90); //Slight delay for animation
  }
  delay(1000);
  for (int l = 0; l < 16; l++)
    lcd.scrollDisplayLeft();
  for (int l = 51; l > -1; l--) { //Repeating 51 times
    analogWrite(bri, l * 5);
    delay(35);
  }
  delay(1000);
  digitalWrite(bri, HIGH);
  for (int l = 0; l < 51; l++) { //Repeating 51 times
    analogWrite(contra, l * 5);
    delay(35);
  }
  delay(1000);
  digitalWrite(contra,LOW);
  lcd.setCursor(0, 0);

}
#+end_src

Bovenstaande code werkt! Verder de code aangepast. De output gaat nu naar LCD en naar serial port. De live waarde wordt in de bovenste regel van de LCD gezet en het maximum in de onderste regel. Nu is het een standalone computer. Je hebt wel een voeding nodig (via usb adapter bijvoorbeeld).

+begin_src python
:tangle Programmeren_in_Python_SQLite_Inzendopgave_090h5_antwoord_2.py :results output


#+begin_src C
/* PowerStrike v0.03. Gemaakt om een enkele FSR druk sensor live output te geven op een LCD scherm.*/

#include <LiquidCrystal.h> //Import de LCD library
LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins

#define PowerStrikepin A0 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define contra 9          // Definieer de pin die het contrast van de LCD regelt
#define bri 10            // Definieer de pin die de brightness van het LCD scherm regelt

// Definieer de variabelen
int PowerStrikereading;   // Variabele voor opslag PowerStrike waarde
int maximum;              // Variabelel die de maximale kracht bijhoud

void setup() {
  Serial.begin(9600);     // Zet serial communicatie op 9600 baud:
  maximum=0;              // Zet het maximum op 0, dit kan alleen maar oplopen :-)
  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)
}

void loop() {
  PowerStrikereading = analogRead(PowerStrikepin); // Lees PowerStrike pin en save als variabele

  // Print output naar de serial monitor.
  Serial.print("Analoge waarde = ");  // Print de string "Analoge waarde = ".
  Serial.print(PowerStrikereading);   // Voer eraan toe de 'Live readout
  // We zetten de grenzen waarbij een nieuw drukniveau is bereikt.
  // Zeer wetenschappelijke omschrijvingen natuurlijk.
  if (PowerStrikereading < 10) {
    Serial.println(" - Throwing the kitchen sink. Goodnight Irene!");
  }

  // Print output naar de LCD.
  // Uitlezen in bovenste regel, onderste regel geeft het maximum
  if (PowerStrikereading < maximum) {
    lcd.setCursor(0, 0);            // Bovenste regel
    lcd.print(PowerStrikereading);  // 'Live' output
    lcd.setCursor(0, 1);            // Onderste regel
    lcd.print(maximum);             // Maximum output
  } else {
    lcd.setCursor(0, 0);            // Bovenste regel
    lcd.print(PowerStrikereading);  // 'Live' output
    maximum=PowerStrikereading;     // Maximum gevonden dus overschrijven
    lcd.setCursor(0, 1);            // Onderste regel
    lcd.print(maximum);             // Maximum output
    lcd.print("max");
  }

  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.

}
#+end_src

* 07JUN22: een tweede drukmeter aansluiten...

Testen of ik een tweede drukmeter kan aansluiten.


#+begin_src C
/* PowerStrike v0.04. Gemaakt om meerdere FSR druk sensoren live output te geven op een LCD scherm.*/

#include <LiquidCrystal.h> //Import de LCD library
LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins

#define PowerStrikepinA A0 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define PowerStrikepinB A1 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define contra 9          // Definieer de pin die het contrast van de LCD regelt
#define bri 10            // Definieer de pin die de brightness van het LCD scherm regelt

// Definieer de variabelen
int PowerStrikereadingA;   // Variabele voor opslag PowerStrike waarde
int maximumA;              // Variabelel die de maximale kracht bijhoud
int maximumB;              // Variabelel die de maximale kracht bijhoud
int PowerStrikereadingB;   // Variabele voor opslag PowerStrike waarde
//int maximumB;              // Variabelel die de maximale kracht bijhoud

void setup() {
  Serial.begin(9600);     // Zet serial communicatie op 9600 baud:
  maximumA=0;              // Zet het maximum op 0, dit kan alleen maar oplopen :-)
  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)
}

void loop() {
  PowerStrikereadingA = analogRead(PowerStrikepinA); // Lees PowerStrike pin en save als variabele
  PowerStrikereadingB = analogRead(PowerStrikepinB); // Lees PowerStrike pin en save als variabele

  // Print output naar de serial monitor.
  Serial.print("Analoge waarde, knokkel 1, knokkel 2 = ");  // Print de string "Analoge waarde = ".
  Serial.print(PowerStrikereadingA);   // Voer eraan toe de 'Live readout
  Serial.print(", ");   // Voer eraan toe de 'Live readout
  Serial.println(PowerStrikereadingB);   // Voer eraan toe de 'Live readout

  // We zetten de grenzen waarbij een nieuw drukniveau is bereikt.
  // Zeer wetenschappelijke omschrijvingen natuurlijk.

  // Print output naar de LCD.
  // Uitlezen in bovenste regel, onderste regel geeft het maximum
  if (PowerStrikereadingA < maximumA) {
    lcd.setCursor(0, 0);            // Bovenste regel
    lcd.print(PowerStrikereadingA);  // 'Live' output
    lcd.setCursor(0, 1);            // Onderste regel
    lcd.print(maximumA);             // Maximum output
  } else {
    lcd.setCursor(0, 0);            // Bovenste regel
    lcd.print(PowerStrikereadingA);  // 'Live' output
    maximumA=PowerStrikereadingA;     // Maximum gevonden dus overschrijven
    lcd.setCursor(0, 1);            // Onderste regel
    lcd.print(maximumA);             // Maximum output
    lcd.print("max");
  }

  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.

}





#+end_src



Het lukt om twee readouts te krijgen maar de lcd moet ook nog ingesteld worden. Opnieuw code aanpasssen.


#+begin_src C
/* PowerStrike v0.04. Gemaakt om meerdere FSR druk sensoren live output te geven op een LCD scherm.*/

#include <LiquidCrystal.h> //Import de LCD library
LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins

#define PowerStrikepinA A0 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define PowerStrikepinB A1 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define contra 9          // Definieer de pin die het contrast van de LCD regelt
#define bri 10            // Definieer de pin die de brightness van het LCD scherm regelt

// Definieer de variabelen
int PowerStrikereadingA;   // Variabele voor opslag PowerStrike waarde
int maximumA;              // Variabelel die de maximale kracht bijhoud
int maximumB;              // Variabelel die de maximale kracht bijhoud
int PowerStrikereadingB;   // Variabele voor opslag PowerStrike waarde

void setup() {
  Serial.begin(9600);     // Zet serial communicatie op 9600 baud:
  maximumA=0;              // Zet het maximum op 0, dit kan alleen maar oplopen :-)
  maximumB=0;              // Zet het maximum op 0, dit kan alleen maar oplopen :-)

  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)

  // Stukje amusement op de LCD
  lcd.setCursor(0, 0);            // Bovenste regel
  lcd.print("**PowerStrike**");
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in ");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in 3");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in 2");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in 1");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.clear(); // Clear LCD anders krijg je trailing rommel
  lcd.setCursor(0, 0);            // Bovenste regel
  lcd.print("  Tijd om te");
  lcd.setCursor(0, 1);            // Bovenste regel
  lcd.print("!!!!!RAMMEN!!!!!");
  delay(2000); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.clear(); // Clear LCD anders krijg je trailing nummers (alternatief: padding programmeren)

}

void loop() {
  lcd.clear(); // Clear LCD anders krijg je trailing nummers (alternatief: padding programmeren)

  PowerStrikereadingA = analogRead(PowerStrikepinA); // Lees PowerStrike pin en save als variabele
  PowerStrikereadingB = analogRead(PowerStrikepinB); // Lees PowerStrike pin en save als variabele

  //set maxima als deze gevonden worden
  if (PowerStrikereadingA > maximumA) {
    maximumA=PowerStrikereadingA;     // Maximum gevonden dus overschrijven
  }
  if (PowerStrikereadingB > maximumB) {
    maximumB=PowerStrikereadingB;     // Maximum gevonden dus overschrijven
  }

  // Print naar LCD
  // Live uitlezen in bovenste regel, onderste regel geeft de maximuma
    lcd.setCursor(0, 0);            // Bovenste regel
    lcd.print("L1:");
    lcd.print(PowerStrikereadingA); // 'Live' output
    lcd.setCursor(9, 0);            // Bovenste regel
    lcd.print("L2:");
    lcd.print(PowerStrikereadingB); // 'Live' output
    lcd.setCursor(0, 1);            // Onderste regel
    lcd.print("M1:");
    lcd.print(maximumA);            // Maximum output
    lcd.setCursor(9, 1);            // Bovenste regel
    lcd.print("M2:");
    lcd.print(maximumB);            // Maximum output

   // Print output naar de serial monitor.
  Serial.print("LIVE = ");  // Print de string "Analoge waarde = ".
  Serial.print(PowerStrikereadingA);   // Voer eraan toe de 'Live readout
  Serial.print(", ");   // Voer eraan toe de 'Live readout
  Serial.print(PowerStrikereadingB);   // Voer eraan toe de 'Live readout
  Serial.print("   MAX = ");   // Voer eraan toe de 'Live readout
  Serial.print(maximumA);
  Serial.print(", ");   // Voer eraan toe de 'Live readout
  Serial.println(maximumB);   // Voer eraan toe de 'Live readout

  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
}
 

#+end_src






* PowerStrike, huidige versie

Deze paragraaf bevat de huidige versie van Powerstrike waar ik aan werk en die op Github wordt gezet. Deze wordt via tangle opgeslagen in ~/Arduino/PowerStrike/PowerStrike.ino. Oudere versies en andere versies staan in bovenstaande paragrafen met code blocks.


FIXME: door te tanglen wordt er een main regel toegevoegd...
Dit moet beter kunnen...

#+begin_src C :tangle ~/Arduino/PowerStrike/PowerStrike.ino
/* PowerStrike v0.04. Gemaakt om meerdere FSR druk sensoren live output te geven op een LCD scherm.*/

#include <LiquidCrystal.h> //Import de LCD library
LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Initialiseren vd LCD en gebruikte pins

#define PowerStrikepinA A0 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define PowerStrikepinB A1 // Definieer welke Arduino pin wordt gebruikt voor uitlezen
#define contra 9          // Definieer de pin die het contrast van de LCD regelt
#define bri 10            // Definieer de pin die de brightness van het LCD scherm regelt

// Definieer de variabelen
int PowerStrikereadingA;   // Variabele voor opslag PowerStrike waarde
int maximumA;              // Variabelel die de maximale kracht bijhoud
int maximumB;              // Variabelel die de maximale kracht bijhoud
int PowerStrikereadingB;   // Variabele voor opslag PowerStrike waarde

void setup() {
  Serial.begin(9600);     // Zet serial communicatie op 9600 baud:
  maximumA=0;              // Zet het maximum op 0, dit kan alleen maar oplopen :-)
  maximumB=0;              // Zet het maximum op 0, dit kan alleen maar oplopen :-)

  // LCD instellingen
  lcd.begin(16, 2);         // Stelt in dat de LCD een 16x2 type is
  pinMode(contra, OUTPUT);  // Maak pin 9 als OUTPUT
  pinMode(bri, OUTPUT);     // Maak pin 10 als OUTPUT
  digitalWrite(contra, LOW);// Geeft geen power aan contrast pin. Nu zie je woorden. Best handig.
  analogWrite(bri, 255);    // Geeft volledige power aan screen brightness LED (255)

  // Stukje amusement op de LCD
  lcd.setCursor(0, 0);            // Bovenste regel
  lcd.print("**PowerStrike**");
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in ");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in 3");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in 2");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.setCursor(0, 1);            // Onderste regel
  lcd.print("Booting in 1");
  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.clear(); // Clear LCD anders krijg je trailing rommel
  lcd.setCursor(0, 0);            // Bovenste regel
  lcd.print("  Tijd om te");
  lcd.setCursor(0, 1);            // Bovenste regel
  lcd.print("!!!!!RAMMEN!!!!!");
  delay(2000); // De delay van de loop wordt ingesteld, in milliseconden.
  lcd.clear(); // Clear LCD anders krijg je trailing nummers (alternatief: padding programmeren)

}

void loop() {
  lcd.clear(); // Clear LCD anders krijg je trailing nummers (alternatief: padding programmeren)

  PowerStrikereadingA = analogRead(PowerStrikepinA); // Lees PowerStrike pin en save als variabele
  PowerStrikereadingB = analogRead(PowerStrikepinB); // Lees PowerStrike pin en save als variabele

  //set maxima als deze gevonden worden
  if (PowerStrikereadingA > maximumA) {
    maximumA=PowerStrikereadingA;     // Maximum gevonden dus overschrijven
  }
  if (PowerStrikereadingB > maximumB) {
    maximumB=PowerStrikereadingB;     // Maximum gevonden dus overschrijven
  }

  // Print naar LCD
  // Live uitlezen in bovenste regel, onderste regel geeft de maximuma
    lcd.setCursor(0, 0);            // Bovenste regel
    lcd.print("L1:");
    lcd.print(PowerStrikereadingA); // 'Live' output
    lcd.setCursor(9, 0);            // Bovenste regel
    lcd.print("L2:");
    lcd.print(PowerStrikereadingB); // 'Live' output
    lcd.setCursor(0, 1);            // Onderste regel
    lcd.print("M1:");
    lcd.print(maximumA);            // Maximum output
    lcd.setCursor(9, 1);            // Bovenste regel
    lcd.print("M2:");
    lcd.print(maximumB);            // Maximum output

   // Print output naar de serial monitor.
  Serial.print("LIVE = ");  // Print de string "Analoge waarde = ".
  Serial.print(PowerStrikereadingA);   // Voer eraan toe de 'Live readout
  Serial.print(", ");   // Voer eraan toe de 'Live readout
  Serial.print(PowerStrikereadingB);   // Voer eraan toe de 'Live readout
  Serial.print("   MAX = ");   // Voer eraan toe de 'Live readout
  Serial.print(maximumA);
  Serial.print(", ");   // Voer eraan toe de 'Live readout
  Serial.println(maximumB);   // Voer eraan toe de 'Live readout

  delay(500); // De delay van de loop wordt ingesteld, in milliseconden.
}


#+end_src

* Tekenen van Arduino afbeelding met Fitzing software
Geinstalleerd via ~yay fritzing~.
