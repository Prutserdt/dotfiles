#+TITLE: My configuration of Qtile Window Manager
#+auto_tangle: t
#+AUTHOR: Prutserdt
[[file:Qtile.png]]
* Table of contents :toc:
- [[#introduction][Introduction]]
- [[#configpy][Config.py]]
  - [[#imports][Imports]]
  - [[#variables][Variables]]
  - [[#custom-functions][Custom functions]]
  - [[#keybindings-qtile-specific][Keybindings: Qtile specific]]
  - [[#keybindings-audio-monitor-brightness-and-print][Keybindings: Audio, monitor brightness and print]]
  - [[#keybindings-applications-and-files-connected-to-these-hotkeys][Keybindings: Applications (and files connected to these hotkeys)]]
  - [[#keybingings-text-files][Keybingings: Text files]]
  - [[#groups][Groups]]
  - [[#layouts][Layouts]]
  - [[#some-hooks][Some hooks]]
- [[#the-autostartsh-script][The autostart.sh script]]

* Introduction
[[http://www.qtile.org/][Qtile]] is a full-featured, hackable tiling window manager written and configured in Python. In this README.org Emacs document my configuration of Qtile is described and it is used as the source to create the Qtile configuration file [[https://github.com/Prutserdt/dotfiles/blob/master/.config/qtile/config.py][config.py]] and the shell script [[https://github.com/Prutserdt/dotfiles/blob/master/.config/qtile/autostart.sh][autostart.sh]].

* Config.py
This is the configuration file of Qtile.
** Imports
A note is added to ~config.py~ which reminds *not* to edit this file directly.
#+BEGIN_SRC python :tangle config.py :results none :eval never
# NOTE: This file is generated from ~/.config/qtile/README.org
#       Please only edit that file and org-babel-tangle (Emacs)
#+END_SRC

My configuration requires some modules to be loaded. These are all default configuration settings of Qtile.
#+BEGIN_SRC python :tangle config.py :results none :eval never
import psutil
import subprocess
import os
import socket
import sys

from typing import List
from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, KeyChord, Match, Screen, ScratchPad, DropDown
from libqtile.lazy import lazy
from os.path import expanduser
from libqtile.scripts.main import VERSION
#+END_SRC

** Variables
Some variables are declared. The left super key, right super key and right alt key are used for keybindings. Also a variable is used to refer to my open_emacs.py script and home.
#+BEGIN_SRC python :tangle config.py :results none :eval never
mL = "mod4"                         # Left super key, dedicated to the windowmanager
mR = "mod3"                         # Right super key, dedicated to open applications
aR = "mod5"                         # Right alt key, dedicated to opening of files

home = os.path.expanduser("~")      # Declare the variable for the file path
#+END_SRC

** Custom functions
These functions are used for keybindings and are utilized in the following keybinding section.
#+BEGIN_SRC python :tangle config.py :eval never
def threecol(qtile):
    qtile.cmd_to_layout_index(0)    # monadthreecolumn

def montall(qtile):
    qtile.cmd_to_layout_index(1)    # monadtall

def monwide(qtile):
    qtile.cmd_to_layout_index(2)    # monadwide

def Max(qtile):
    qtile.cmd_to_layout_index(3)    # Max

# Define a global variable to track the current layout
current_layout = 0  # threecol is the default layout

# Toggle between the max layout and monadthreecolumn
def toggle_max_and_bar(qtile):
    global current_layout

    if current_layout == 3:         # If Max is currently selected
        qtile.cmd_to_layout_index(0)# Switch to threecol layout
        qtile.cmd_hide_show_bar()   # Show the bar
        current_layout = 0          # Update the current layout
    else:
        qtile.cmd_to_layout_index(3)# Switch to Max layout
        qtile.cmd_hide_show_bar()   # Hide the bar
        current_layout = 3          # Update the current layout
#+END_SRC

Three functions to change the gap size between windows, in Qtile this is called margins.
#+BEGIN_SRC python :tangle config.py :eval never
@lazy.layout.function
def increase_margin(self):
    self.margin += 20
    self.group.layout_all()

@lazy.layout.function
def decrease_margin(self):
    new_margin = self.margin - 1
    if new_margin < 0:
        new_margin = 0
    self.margin = new_margin
    self.group.layout_all()

@lazy.layout.function
def reset_margin(self):
    self.margin = 0
    self.group.layout_all()
#+END_SRC

The following part is about system specificity. If my hostname is =thinkpad= or =work= then my computer is a laptop and I want to show battery information in my top bar. If my computer is a desktop this is not needed of course.
#+BEGIN_SRC python :tangle config.py :results none :eval never
# Check if hostname is "thinkpad" or "work"
is_thinkpad_or_work = socket.gethostname() in ["thinkpad", "work"]

# Define get_battery_status() function
if is_thinkpad_or_work:
    def get_battery_status():
        battery = check_output(['acpi'])
        return battery.decode("utf-8").strip()

battery_widget = [
    widget.Battery(
        battery=1,
        format='{char} {percent:2.0%}',
        update_interval=30
    )
] if is_thinkpad_or_work else []
#+end_src

** Keybindings: Qtile specific
My left super key bindings are all related to Qtile, for instance moving windows around.
#+BEGIN_SRC python :tangle config.py :results none :eval never
keys = [
    Key(
        [mL],
        "Return",
        lazy.spawn("alacritty"),
        desc="Launch terminal in new window"),
    Key(
        [mL],
        "space",
        lazy.layout.swap_main(),
        desc="Make main window of selected window"),
    Key(
        [mL],
        "b",
        lazy.hide_show_bar(position="top"),
        desc="Toggle the bar"),
    Key(
        [mL],
        "c",
        lazy.spawncmd(),
        desc="Spawn a command using a prompt widget"),
    Key(
        [mL],
        "f",
        lazy.function(toggle_max_and_bar),
        desc="Toggle layout and bar"),
    Key(
        [mL],
        "r",
        lazy.spawncmd(),
        desc="Prompt commands from taskbar"),
    Key(
        [mL],
        "t",
        lazy.window.toggle_floating(),
        desc="Toggle floating state"),
    Key(
        [mL],
        "q",
        lazy.window.kill(),
        desc="Kill focused window"),
    Key(
        [mL, "control"],
        "r",
        lazy.reload_config(),
        desc="Reload the Qtile configuration"),
    Key(
        [mL, "shift"],
        "q",
        lazy.spawn(expanduser("~/.config/exitqtile.sh")),
        desc="Shutdown Qtile by a shellscript with dmenu options"),

    #Hotkeys to move windows around, resize windows and choose layouts
    Key(
        [mL],
        "j",
        lazy.layout.down(),
        desc="Move window focus down"),
    Key(
        [mL],
        "k",
        lazy.layout.up(),
        desc="Move window focus up"),
    Key([mL, "shift"],
        "h",
        lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key(
        [mL, "shift"],
        "l",
        lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key(
        [mL, "shift"],
        "j",
        lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key(
        [mL, "shift"],
        "k",
        lazy.layout.shuffle_up(),
        desc="Move window up"),
    Key(
        [mL, "control"],
        "h",
        lazy.layout.grow(),
        desc="Grow the selected window"),
    Key(
        [mL, "control"],
        "j",
        lazy.layout.shrink_main(),
        desc="Shrink the main window"),
    Key(
        [mL, "control"],
        "k",
        lazy.layout.grow_main(),
        desc="Grow the main window"),
    Key(
        [mL, "control"],
        "l",
        lazy.layout.shrink(),
        desc="Shrink the selected window"),
    Key(
        [mL],
        "y",
        lazy.function(Max),
        desc="Layout: max"),
    Key(
        [mL],
        "u",
        lazy.function(threecol),
        desc="Layout: Threecolumn  without margins"),
    Key(
        [mL],
        "i",
        lazy.function(monwide),
        desc="Layout: MonadWide no margins"),
    Key(
        [mL],
        "o",
        lazy.function(montall),
        desc="Layout: MonadTall no margins"),
    Key(
        [mL],
        'a',
        increase_margin,
        desc="Increase gaps"),
    Key(
        [mL, "shift"],
        "a",
        decrease_margin,
        desc="Decrease gaps"),
    Key(
        [mL],
        "m",
        reset_margin,
        desc="Reset gaps to zero"),
#+END_SRC

** Keybindings: Audio, monitor brightness and print
Hotkeys to control the volume, muting, printscreen, OCR from printscreen and change monitor brightness and color.
#+BEGIN_SRC python :tangle config.py :results none :eval never
    # Hotkeys for audio and printscreen
    Key(
        [],
        "XF86AudioRaiseVolume",
        lazy.spawn('amixer -q set Master 5%+'),
        lazy.spawn('notify-send -t 6000 " ðŸ”Š Volume increased"')),
    Key(
        [],
        "XF86AudioLowerVolume",
        lazy.spawn("amixer -q set Master 5%-"),
        lazy.spawn('notify-send -t 6000 "ðŸ”ˆ Volume decreased"')),
    Key(
        [],
        "XF86AudioMute",
        lazy.spawn("amixer -q set Master toggle"),
        lazy.spawn('notify-send -t 6000 "ðŸ”‡ Volume muting toggled"')),
    Key(
        [],
        "Print",
        lazy.spawn("xfce4-screenshooter -r -s " + expanduser("~/Downloads")),
        lazy.spawn('notify-send -t 6000 "Running xfce4-screenshooter, please select area with your mouse to make a screenshot"')),
    Key(
        ["shift"],
        "Print",
        lazy.spawn(expanduser("~/.config/screenshot2text.sh"))),
    Key(
        [],
        "XF86Launch8",
        lazy.spawn('$HOME/.config/keyboard_config.sh')),
    Key(
        [],
        "XF86Launch9",
        lazy.spawn(expanduser("~/.config/resetRGB.sh"))),
    Key(
        [],
        "XF86MonBrightnessUp",
        lazy.spawn(expanduser("~/.config/incrMonitorBrightness.sh"))),
    Key(
        [],
        "XF86MonBrightnessDown",
        lazy.spawn(expanduser("~/.config/decrMonitorBrightness.sh"))),
#+END_SRC

** Keybindings: Applications (and files connected to these hotkeys)
Right super key to open applications. Shift is used to update the application.
#+BEGIN_SRC python :tangle config.py :results none :eval never
    # Open applications
    Key([mR],
        "a",
        lazy.spawn("python " + expanduser("~/.config/aandelen.py")),
        lazy.spawn("emacsclient -n ~/Stack/Documenten/Aandelen/aandelen_log.org"),
        desc="Open in emacs: run het python aandelen script en open het aandelen log"),
    Key(
        [mR],
        "b",
        lazy.spawn(expanduser("~/.config/dmenuinternet.sh"))), # browser via dmenu, related to 'urls'
    Key(
        [mR],
        "c",
        lazy.spawn(expanduser("~/.config/clipboard_dm.sh"))), # copy/paste clipoard
    Key(
        [mR],
        "d",
        lazy.spawn(expanduser("~/.config/dmenuapps.sh"))),
    Key(
        [mR, "shift"],
        "d",
        lazy.spawn(expanduser("~/.config/dmenuUpdate.sh"))),
    #Key([mR], "e", lazy.spawn("emacsclient -c -n -a 'emacs'")),
    #Key([mR], "e", lazy.spawn("/usr/bin/emacsclient -c")), # use in case of problems
    #Key([mR], "e", lazy.spawn("/usr/bin/emacs")), # use in case of problems
    #Key([mR], "e", lazy.function(run_emacs)), # use in case of problems
    Key(
        [mR],
        "e",
        lazy.spawn(expanduser("~/.config/run_emacs.sh"))),
    #Key([mR], "E", lazy.spawn(expanduser("~/.config/run_emacs_new_frame.sh"))),
    Key(
        [mR],
        "f",
        lazy.spawn("firefox")),
    Key(
        [mR],
        "g",
        lazy.spawn("gimp")),
    Key(
        [mR],
        "h",
        lazy.spawn(expanduser("~/.config/bitcoin_notification.py"))),
    Key(
        [mR],
        "m",
        lazy.spawn("mousepad")),
    Key(
        [mR, "shift"],
        "m",
        lazy.spawn(expanduser("~/.config/dm_image_to_maps.sh"))),
    # show location of picture in google maps
    Key(
        [mR],
        "p",
        lazy.spawn("keepass")),
    Key(
        [mR, "shift"],
        "p",
        lazy.spawn(expanduser("~/.config/dm_move_images.sh"))),  # show location of picture in google maps
    Key(
        [mR],
        "s",
        lazy.spawn("xfce4-screenshooter -s " + expanduser("~~/Downloads"))),
    Key(
        [mR, "shift"],
        "s",
        lazy.spawn("signal-desktop --start-in-tray --use-tray-icon")),
    Key(
        [mR],
        "t",
        lazy.spawn(expanduser("~/.config/dmenuthunar.sh"))),  # related to 'directories'
    Key(
        [mR],
        "u",
        lazy.spawn(expanduser("~/.config/dmenuunicode.sh"))),  # related to 'unicode'
    Key(
        [mR],
        "v",
        lazy.spawn("alacritty -e vim")),
    Key(
        [mR],
        "w",
        lazy.spawn(expanduser("~/.config/dmenuwallpaper.sh"))),
    Key(
        [mR],
        "delete",
        lazy.spawn(expanduser("~/.config/dmenukill.sh"))),
#+END_SRC

** Keybingings: Text files
The right alt key is used to open text files in Emacs. NOTE: if emacs is not open in a window this will not work, first open emacs!
#+BEGIN_SRC python :tangle config.py :results none :eval never
    # Open text files in emacs, note
    Key(
        [aR],
        "a",
        lazy.spawn("emacsclient -n ~/Stack/Documenten/Aandelen/aandelen_log.org")),
    Key(
        [aR],
        "b",
        lazy.spawn("emacsclient -n ~/Stack/Command_line/urls')}")),  # related to dmenuinternet.sh
    Key(
        [aR],
        "c",
        lazy.spawn("emacsclient -n ~/.config/README.org")),  # shell scripts readme
    Key(
        [aR],
        "e",
        lazy.spawn("emacsclient -n ~/.config/doom/README.org")),
    Key(
        [aR],
        "q",
        lazy.spawn("emacsclient -n ~/.config/qtile/README.org")),
    Key(
        [aR],
        "r",
        lazy.spawn("emacsclient -n ~/README.org")),  # github readme
    Key(
        [aR],
        "t",
        lazy.spawn("emacsclient -n ~/Stack/Command_line/directories")),  # related to dmenuthunar.sh
    Key(
        [aR, "shift"],
        "t",
        lazy.spawn("emacsclient -n ~/Stack/Command_line/textfiles")),
    Key(
        [aR],
        "u",
        lazy.spawn("emacsclient -n ~/.config/unicode")),  # related to dmenuunicode.sh
    Key(
        [aR],
        "v",
        lazy.spawn("emacsclient -n ~/.vimrc")),
    Key(
        [aR],
        "w",
        lazy.spawn(expanduser("~/.config/wololo.sh"))),
    Key(
        [aR],
        "x",
        lazy.spawn("emacsclient -n ~/.xinitrc")),
    Key(
        [aR],
        "z",
        lazy.spawn("emacsclient -n ~/.zshrc")),
]
#+END_SRC

** Groups
The workspaces are described here, which are called Groups in Qtile. I don't need more than four groups so I limited it to that. The number 3 is not present because of my custom Sweep keyboard where I bound number 3 at the same keyposition as 'd' and 'Left Super'.
#+BEGIN_SRC python :tangle config.py :results none :eval never
groups = [Group(i) for i in "1245"]

for i in groups:
    keys.extend(
        [
            Key(
                [mL],      # mL + number of group --> switch to group
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # Move and follow focused window to group
            Key(
                [mL, "shift"],
                i.name,
                lazy.window.togroup(
                    i.name,
                    switch_group=True),  #True=follow window
                desc="Move and follow the focused window to group {}".format(i.name),
            ),
            # Exactly the same as above, but don't follow the moved window to group
            Key(
                [mL, "control", "shift"],
                i.name,
                lazy.window.togroup(i.name),
                desc="Move the focused window to group {}".format(i.name),
            ),
        ]
    )

groups.append(
    ScratchPad("scratchpad", [
        DropDown("1",
                 "qalculate-gtk",
                 x=0.0,
                 y=0.0,
                 width=0.2,
                 height=0.3,
                 on_focus_lost_hide=False),
    ])
)

is_thinkpad = socket.gethostname().lower() in ["thinkpad"]

keys.extend([
    Key([],
        "XF86Favorites" if is_thinkpad else "XF86Calculator",
        lazy.group["scratchpad"].dropdown_toggle("1"),
        lazy.spawn('notify-send -t 60000 " Running qalculate-gtk"'))
])

layout_theme = {"border_width": 2,
                "border_focus":  "#d75f5f",
                "border_normal": "#282C35",
                "min_ratio": 0.05, "max_ratio": 0.9,
                "new_client_position":'bottom',
                }

layout_theme_max = {"border_width": 0,
                "border_focus": False,
                "min_ratio": 0.05, "max_ratio": 0.9,
                "new_client_position":'bottom',
                }

# A separate theme for floating mode, different color, thicker border width
floating_theme = {"border_width": 3,
                "border_focus": "#98BE65",
                "border_normal": "#006553",
                }
#+END_SRC

** Layouts
I mainly use the MonadThreeCol layout, which is similar to DWM's centered master and can switch to tall and wide mode and use gaps or no gaps for these layouts.
#+BEGIN_SRC python :tangle config.py :results none :eval never
layouts = [
   layout.MonadThreeCol(**layout_theme),
   layout.MonadTall(**layout_theme),
   layout.MonadWide(**layout_theme),
   layout.Max(**layout_theme_max),  # Set border_focus to False for Max layout
]

widget_defaults = dict(
    font="hack",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.Spacer(),
                widget.GroupBox(
                    inactive= "333333",
                    active= "888888",
                    disable_drag=True,
                    highlight_method='line',
                    highlight_color=['000000','d75f5f']),
                widget.WindowName(
                    foreground="#555555"),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.Notify(
                    foreground="#ff966c"),
                widget.Systray(),
                widget.QuickExit(
                    foreground="#888888"),
            ]   + battery_widget +
            [
                widget.OpenWeather(
                    app_key="4cf3731a25d1d1f4e4a00207afd451a2",
                    cityid="2759661",
                    format='{main_temp:.1f} Â°C {icon}',
                    foreground="#888888",
                    metric=True,
                    mouse_callbacks={"Button1": lazy.spawn("xdg-open https://buienradar.nl"), "Button3": lazy.spawn("xdg-open https://openweathermap.org/city/2759661")}
                ),
                widget.Volume(
                    foreground="#d75f5f"),
                widget.Clock(
                    format="%d%b%y %H:%M",
                    foreground="#888888",
                    mouse_callbacks={"Button1": lazy.spawn("xdg-open https://www.timeanddate.com/calendar/")}
                ),
            ],
            24,
            opacity=0.85,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag(
        [mL],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position()
        ),
    Drag(
        [mL],
        "Button3",
        lazy.window.set_size_floating(),
        start=lazy.window.get_size()
        ),
    Click(
        [mL],
        "Button2",
        lazy.window.bring_to_front()
        ),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(**floating_theme,
    float_rules=[
        # Run utility of `xprop` to see the wm class and name of an X client
        ,*layout.Floating.default_float_rules,
        Match(wm_class="gimp"),      # gimp image editor
        Match(wm_class="keepass2"),  # keepass password editor
    ],
)

auto_fullscreen = False
focus_on_window_activation = "smart"
reconfigure_screens = True

auto_minimize = True  # for steam games

#+END_SRC

** Some hooks
A startup script is ran after startup of Qtile and the window swallowing is set here to swallow the terminal window when an application is started in it (which is reopened after closing of the applications).
#+BEGIN_SRC python :tangle config.py :eval never
@hook.subscribe.layout_change
def update_current_layout(layout):
    global current_layout
    current_layout = layout.index()

# Startup script
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser("~")
    subprocess.call([home + "/.config/qtile/autostart.sh"])
    home = os.path.expanduser("~")

# swallow window when starting application from terminal
@hook.subscribe.client_new
def _swallow(window):
    pid = window.window.get_net_wm_pid()
    ppid = psutil.Process(pid).ppid()
    cpids = {
        c.window.get_net_wm_pid(): wid for wid, c in window.qtile.windows_map.items()
    }
    for i in range(5):
        if not ppid:
            return
        if ppid in cpids:
            parent = window.qtile.windows_map.get(cpids[ppid])
            parent.minimized = True
            window.parent = parent
            return
        ppid = psutil.Process(ppid).ppid()

@hook.subscribe.client_killed
def _unswallow(window):
    if hasattr(window, 'parent'):
        window.parent.minimized = False

wmname = f"Qtile {VERSION}"
#+END_SRC

* The autostart.sh script
This shell script is called in the config.py script and is autostarting some services when Qtile starts. In my case this is hostname dependent.The us keyboard map is selected and my Alt/Super/Escape keys are changed. With ~xset~ the keyrepeats are increased. Picom is handling the transparancy and the Emacs daemon is started. nm-applet is the NetworkManager applet.
#+BEGIN_SRC sh :tangle autostart.sh :eval no :tangle-mode (identity #o755)
#!/bin/bash
# NOTE: This file is generated from ~/.config/qtile/README.org
#       Please only edit that file and org-babel-tangle (Emacs)

hostname=$(uname -n)

if [ "$hostname" = "work" ]; then
    $HOME/.config/notify-log.sh $HOME/.config/notify.log &  # writing notification to a logfile
    sleep 1
    $HOME/.config/escape_caps_toggle.sh &
    sleep 0.2
    $HOME/.config/keyboard_config.sh &
    setxkbmap us &
    emacs --daemon &
    nm-applet &
    thunar --daemon &
    picom -b &
    notify-send -t 60000 "autostart, found hostname: $hostname. Script continued."
    VBoxClient --clipboard &&
    VBoxClient --draganddrop
    xrandr --output Virtual-1 --mode 1920x1080; feh --bg-fill ~/Stack/Afbeeldingen/Wallpapers/default.jpg &
    syncthing &
fi

if [ "$hostname" = "linuxbox" ]; then
    setxkbmap us &
    $HOME/.config/notify-log.sh $HOME/.config/notify.log &
    emacs --daemon &
    nm-applet &
    thunar --daemon &
    sleep 1
    $HOME/.config/keyboard_config.sh &
    picom -b &
    syncthing &
    #signal-desktop --start-in-tray --use-tray-icon &
    #$HOME/.config/stack_startup.sh & # Shell script to search for current Stack AppImage
fi

if [ "$hostname" = "thinkpad" ]; then
    $HOME/.config/escape_caps_toggle.sh &
    $HOME/.config/keyboard_config.sh &
    setxkbmap us &
    $HOME/.config/notify-log.sh $HOME/.config/notify.log &
    emacs --daemon &
    nm-applet &
    thunar --daemon &
    picom -b &
    syncthing &
fi
#+end_src

