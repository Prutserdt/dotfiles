#+TITLE: My configuration of
#+auto_tangle: t
#+AUTHOR: Prutserdt

#+begin_src
  ___  _   _ _       __        ___           _
 / _ \| |_(_) | ___  \ \      / (_)_ __   __| | _____      __
| | | | __| | |/ _ \  \ \ /\ / /| | '_ \ / _` |/ _ \ \ /\ / /
| |_| | |_| | |  __/   \ V  V / | | | | | (_| | (_) \ V  V /
 \__\_\\__|_|_|\___|    \_/\_/  |_|_| |_|\__,_|\___/ \_/\_/
 __  __
|  \/  | __ _ _ __   __ _  __ _  ___ _ __
| |\/| |/ _` | '_ \ / _` |/ _` |/ _ \ '__|
| |  | | (_| | | | | (_| | (_| |  __/ |
|_|  |_|\__,_|_| |_|\__,_|\__, |\___|_|
                          |___/
#+end_src

* Table of contents :toc:
- [[#qtile-and-my-config][Qtile and my config]]
  - [[#imports][Imports]]
  - [[#variables][Variables]]
  - [[#custom-functions][Custom functions]]
  - [[#keybindings-qtile-specific][Keybindings: Qtile specific]]
  - [[#keybindings-audio-monitor-brightness-and-print][Keybindings: Audio, monitor brightness and print]]
  - [[#keybindings-applications-and-files-connected-to-these-hotkeys][Keybindings: Applications (and files connected to these hotkeys)]]
  - [[#keybingings-text-files][Keybingings: Text files]]
  - [[#groups][Groups]]
  - [[#layouts][Layouts]]
  - [[#some-hooks][Some hooks]]
- [[#the-autostartsh-script][The autostart.sh script]]
- [[#about-this-emacs-org-document][About this Emacs org document]]

* Qtile and my config
[[http://www.qtile.org/][Qtile]] is a full-featured, hackable tiling window manager written and configured in Python. In this README.org emacs document my configuration of Qtile is described and it is used as the source to create the Qtile configuration file [[https://github.com/Prutserdt/dotfiles/blob/master/.config/qtile/config.py][config.py]] and the shell script [[https://github.com/Prutserdt/dotfiles/blob/master/.config/qtile/autostart.sh][autostart.sh]].

Check the sourcecode of Qtile by running from python shell: ~import libqtile~, ~print(help(libqtile))~, ~dir(libqtile)~ etc.

** Imports
A note is added to ~config.py~ which reminds *not* to edit this file directly.
#+BEGIN_SRC python :tangle config.py :results none
# NOTE: This file is generated from ~/.config/qtile/README.org
#       Please only edit that file and org-babel-tangle (emacs)
#+end_src

My configuration requires some modules to be loaded. These are all default configuratoin settings of Qtile.
#+BEGIN_SRC python :tangle config.py :results none
import psutil, subprocess, os
from typing import List
from libqtile import bar, layout, widget,hook
from libqtile.config import ( Click, Drag, Group, Key, KeyChord, Match,
                                Screen, ScratchPad, DropDown,)
from libqtile.lazy import lazy

#from subprocess import check_output # uncomment for battery
# Let op de Class Distraction free is toegevoegd  03MAR23
#import DistractionFree

#+END_SRC

** Variables
Some variables are declared. The left super key, right super key and right alt key are used for keybindings. Vim and Emacs variables for opening files in these editors.
#+BEGIN_SRC python :tangle config.py :results none
mL = "mod4"                       # Left super key, dedicated to the windowmanager
mR = "mod3"                       # Right super key, dedicated to open applications
aR = "mod5"                       # Right alt key, dedicated to opening of files

home = os.path.expanduser("~")
termVim="alacritty -e vim "         # Open vim in alacritty (used for aR hotkeys)
Emacs="emacsclient -c -a 'emacs' "  # Opens Emacs via the EmacsClient

#+END_SRC

** Custom functions
These functions are used for keybindings and are utilized in the next keybinding section.
#+BEGIN_SRC python :tangle config.py
def threecol(qtile):
    qtile.cmd_to_layout_index(0) #0:monadthreecolumn

def montall(qtile):
    qtile.cmd_to_layout_index(1) #1: monadtall

def monwide(qtile):
    qtile.cmd_to_layout_index(2) #2: monadwide
#+END_SRC

Three functions to change the gap size between windows, in Qtile this is called margins.
#+BEGIN_SRC python :tangle config.py
@lazy.layout.function
def increase_margin(self):
    self.margin += 30
    self.group.layout_all()

@lazy.layout.function
def decrease_margin(self):
    new_margin = self.margin - 5
    if new_margin < 0:
        new_margin = 0
    self.margin = new_margin
    self.group.layout_all()

@lazy.layout.function
def reset_margin(self):
    self.margin = 0
    self.group.layout_all()

# uncomment for battery
# def get_battery_status():
#     battery = check_output(['acpi'])
#     battery = battery.decode("utf-8")
#     battery = battery.strip()
#    return battery
#+END_SRC


** Keybindings: Qtile specific
My left super key bindings are all related to Qtile, for instance moving windows around.
#+BEGIN_SRC python :tangle config.py :results none

keys = [
    Key([mL], "Return", lazy.spawn("alacritty"),        desc="Launch terminal in new window"),
    Key([mL], "space", lazy.layout.swap_main(),         desc="Make main window of selected window"),
    Key([mL], "b", lazy.hide_show_bar(position="top"),  desc="Toggle the bar"),
    Key([mL], "f", lazy.window.toggle_fullscreen(),     desc="Fullscreen the current window"),
    Key([mL], "r", lazy.spawncmd(),                     desc="Prompt commands from taskbar"),
    Key([mL], "t", lazy.window.toggle_floating(),       desc="Toggle floating state"),
    Key([mL], "q", lazy.window.kill(),                  desc="Kill focused window"),
    Key([mL,  "control"], "r", lazy.reload_config(),    desc="Reload the Qtile configuration"),
    Key([mL,  "shift"], "q", lazy.spawn("alacritty -e"+ home + "/.config/exitqtile.sh"), desc="Shutdown Qtile by a shellscript"),

    #Hotkeys to move windows around, resize windows and choose layouts
    Key([mL], "h", lazy.layout.left(),                  desc="Move window focus to the left"),
    Key([mL], "l", lazy.layout.right(),                 desc="Move window focus to the right"),
    Key([mL], "j", lazy.layout.down(),                  desc="Move window focus down"),
    Key([mL], "k", lazy.layout.up(),                    desc="Move window focus up"),
    Key([mL, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mL, "shift"], "l", lazy.layout.shuffle_right(),desc="Move window to the right"),
    Key([mL, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mL, "shift"], "k", lazy.layout.shuffle_up(),   desc="Move window up"),
    Key([mL, "control"], "h", lazy.layout.grow(),       desc="Grow the selected window"),
    Key([mL, "control"], "j", lazy.layout.shrink_main(),desc="Shrink the main window"),
    Key([mL, "control"], "k", lazy.layout.grow_main(),  desc="Grow the main window"),
    Key([mL, "control"], "l", lazy.layout.shrink(),     desc="Shrink the selected window"),
    Key([mL], "y", lazy.function(montall),              desc="Layout: MonadTall no margins"),
    Key([mL], "u", lazy.function(threecol),             desc="Layout: Threecolumn  without margins"),
    Key([mL], "i", lazy.function(monwide),              desc="Layout: MonadWide no margins"),
    Key([mL], 'a', increase_margin,                     desc="Increase gaps"),
    Key([mL, "shift"], "a", decrease_margin,            desc="Decrease gaps"),
    Key([mL], "m", reset_margin,                        desc="Reset gaps to zero"),
    #+END_SRC

The next code block example is about keychording, a concept used in Emacs that can select functions by typing separate characters, and not keeping modifyer keys pressed. I am not using it for the moment, since it can be a bit confusing and not clear enough when the keychord mode is selected.
#+BEGIN_SRC :results none
 KeyChord([mL], "m", [      # testje, keychording werkt!! :-)
     Key([], "u",lazy.spawn("amixer -q set Master 5%+")),
     Key([], "i",lazy.spawn("amixer -q set Master 5%-")),
     ],
     mode="Margins" # als je mode kiest dan moet je eruit met escape....
     ),
#+END_SRC

** Keybindings: Audio, monitor brightness and print
Hotkeys to control the volume, muting, printscreen and OCR from printscreen.
#+BEGIN_SRC python :tangle config.py :results none
    # Hotkeys for audio and printscreen
#    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer -q set Master 5%+")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn('amixer -q set Master 5%+'), lazy.spawn('notify-send -t 6000 "volume increased"')),
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer -q set Master 5%-"), lazy.spawn('notify-send -t 6000 "volume decreased"')),
    Key([], "XF86AudioMute", lazy.spawn("amixer -q set Master toggle"), lazy.spawn('notify-send -t 6000 "Volume muting toggled"')),
    Key([], "Print", lazy.spawn("xfce4-screenshooter -r -s " + home + "/Downloads"), lazy.spawn('notify-send -t 6000 "Running xfce4-screenshooter, please select area with your mouse to make a screenshot"')),
    Key(["shift"], "Print", lazy.spawn(home + "/.config/screenshot2text.sh")),
# toegevoegd
    Key([], "XF86MonBrightnessUp", lazy.spawn(home + "/.config/incrMonitorBrightness.sh")),
    Key([], "XF86MonBrightnessDown", lazy.spawn(home + "/.config/decrMonitorBrightness.sh")),
#+END_SRC

** Keybindings: Applications (and files connected to these hotkeys)
Right super key to open applications. Shift is usesd to update the application.
#+BEGIN_SRC python :tangle config.py :results none
    # Open applications
    Key([mR], "a",
        lazy.spawn("python " + home + "/.config/aandelen.py"),
        lazy.spawn(Emacs + home + "/Stack/Documenten/Aandelen/aandelen_log.org"),
        desc="Open in vim: run het python aandelen script en open het aandelen log"
        ),
    Key([mR], "b", lazy.spawn(home + "/.config/dmenuinternet.sh")), # browser via dmenu, related to 'urls'
    Key([mR], "e", lazy.spawn("emacsclient -c -a 'emacs'")),
    Key([mR], "d", lazy.spawn(home + "/.config/dmenuapps.sh")),
    Key([mR, "shift"], "d", lazy.spawn(home + "/.config/dmenuUpdate.sh")),
    Key([mR], "f", lazy.spawn("firefox")),
    Key([mR], "g", lazy.spawn("gimp")),
    Key([mR], "k", lazy.spawn("keepass")),
    Key([mR], "m", lazy.spawn("mousepad")),
    Key([mR], "s", lazy.spawn("xfce4-screenshooter -s " + home + "~/Downloads")),
    #volgende is een test, gray icon van signal lijkt niet te werken, 28jan23
    Key([mR, "shift"], "s", lazy.spawn("signal-desktop --start-in-tray --use-tray-icon")),
    Key([mR], "t", lazy.spawn(home + "/.config/dmenuthunar.sh")), # related to 'directories'
    Key([mR], "u", lazy.spawn(home + "/.config/dmenuunicode.sh")), # related to 'unicode'
    Key([mR], "w", lazy.spawn(home + "/.config/dmenuwallpaper.sh")),
#+END_SRC


** Keybingings: Text files
The right alt key is used to open text files in Vim or in Emacs.
#+BEGIN_SRC python :tangle config.py :results none
    Key([aR], "a", lazy.spawn(Emacs + home + ("/Stack/Documenten/Aandelen/aandelen_log.org"))),
    Key([aR], "b", lazy.spawn(Emacs + home + "/Stack/Command_line/urls")), # related to dmenuinternet.sh
    Key([aR], "c", lazy.spawn(Emacs + home + "/Stack/Command_line/commands.org")),
    Key([aR], "e", lazy.spawn(Emacs + home + "/.doom.d/README.org")),
    Key([aR], "i", lazy.spawn(Emacs + home + "/.config/i3/config")),
    Key([aR], "n", lazy.spawn(Emacs + home + "/.newsboat/config")),
    #Key([aR], "p", lazy.spawn(Emacs + home + "/Arduino/PowerStrike/README.org")),
    Key([aR], "p", lazy.spawn(Emacs + home + "/Stack/Code/git/PowerStrike_code/README.org")),
    Key([aR], "q", lazy.spawn(Emacs + home + "/.config/qtile/README.org")),
    Key([aR], "r", lazy.spawn(Emacs + home + "/README.org")), # github readme
    Key([aR], "s", lazy.spawn(Emacs + home + "/.config/README.org")), # shell scripts readme
    Key([aR], "t", lazy.spawn(Emacs + home + "/Stack/Command_line/directories")), # related to dmenuthunar.sh
    Key([aR], "u", lazy.spawn(Emacs + home + "/.config/unicode")), # related to dmenuunicode.sh
    Key([aR], "v", lazy.spawn(termVim + home + "/.vimrc")),
    Key([aR], "w", lazy.spawn(home + "/.config/wololo.sh")),
    Key([aR], "x", lazy.spawn(Emacs + home + "/.xinitrc")),
    Key([aR], "z", lazy.spawn(Emacs + home + "/.zshrc")),
]
#+END_SRC

** Groups
The workspaces are described here, which are called Groups in Qtile. I don't need more then four groups so I limited it to that.
#+BEGIN_SRC python :tangle config.py :results none
groups = [Group(i) for i in "1234"]

for i in groups:
    keys.extend(
        [
            Key(
                [mL],      # mL + letter of group = switch to group
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mL+shift+group letter= move and follow focused window to group
            Key(
                [mL, "shift"],
                i.name,
                lazy.window.togroup(i.name,switch_group=True), #True=follow window
                desc="Move and follow the focused window to group {}".format(i.name),
            ),
            # Exactly the same as above, but don't follow the moved window to group
            Key(
                [mL, "control", "shift"],
                i.name,
                lazy.window.togroup(i.name),
                # add ",switch_group=True" after i.name to follow the window
                desc="Move the focused window to group {}".format(i.name),
            ),
        ]
    )

groups.append(
    ScratchPad("scratchpad", [
        DropDown("1", "qalculate-gtk", x=0.0, y=0.0, width=0.2, height=0.3,
                 on_focus_lost_hide=False),
    ])
)

keys.extend([
        Key([], "XF86Calculator", lazy.group["scratchpad"].dropdown_toggle("1")),
        #Key([], "XF86Favorites", lazy.group["scratchpad"].dropdown_toggle("1")), # For Thinkpad
])

layout_theme = {"border_width": 2,
                "border_focus":  "#d75f5f",
                "border_normal": "#282C35", #966363
                "min_ratio": 0.05, "max_ratio": 0.9,
                "new_client_position":'bottom',
                }
# A separate theme for floating mode, different color, thicker border width
floating_theme = {"border_width": 3,
                "border_focus": "#98BE65",  #98C379= groen
                "border_normal": "#006553",
                }

#+END_SRC

** Layouts
I mainly use the MonadThreeCol layout, which is similar to DWM's centered master and can switch to tall and wide mode and use gaps or no gaps for these layouts.
Make sure that networkmanager is installed and that nm-applet is part of the autostart.sh, no need to add extras to the top bar.

#+BEGIN_SRC python :tangle config.py :results none

layouts = [
   layout.MonadThreeCol(**layout_theme),
   layout.MonadTall(**layout_theme),
   layout.MonadWide(**layout_theme),
#   layout.DistractionFree(**layout_theme), # toegevoegd 03MAR23
]

widget_defaults = dict(
    font="hack",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(foreground="#555555"),
                widget.CurrentLayout(foreground="#777777"),
                widget.Prompt(foreground="#777777"),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.Notify(foreground="#ff966c"),
                widget.Systray(),
                widget.QuickExit(foreground="#888888"),
                # uncomment for battery
                #widget.Battery(
                #    battery=1,
                #    format='{char} {percent:2.0%}',
                #    update_interval=30,
                #),
                widget.Volume(foreground="#d75f5f"),
                widget.Clock(format="%d%b%y %H:%M",foreground="#888888"),
            ],
            24,
            opacity=0.85,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mL], "Button1",
        lazy.window.set_position_floating(), start=lazy.window.get_position()
        ),
    Drag([mL], "Button3",
        lazy.window.set_size_floating(), start=lazy.window.get_size()
        ),
    Click([mL], "Button2",
        lazy.window.bring_to_front()
        ),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(**floating_theme,
    float_rules=[
        # Run utility of `xprop` to see the wm class and name of an X client
        ,*layout.Floating.default_float_rules,
        Match(wm_class="gimp"),      # gimp image editor
        Match(wm_class="keepass2"),  # keepass password editor
    ],
)

auto_fullscreen = False
focus_on_window_activation = "smart"
reconfigure_screens = True

auto_minimize = True # for steam games

#+END_SRC

** Some hooks
A startup script is ran after startup of Qtile and the window swallowing is set here to swallow the terminal window when an application is started in it (which is reopened after closing of the applications).

#+BEGIN_SRC python :tangle config.py

# Startup scripts
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser("~")
    subprocess.call([home + "/.config/qtile/autostart.sh"])

# swallow window when starting application from terminal
@hook.subscribe.client_new
def _swallow(window):
    pid = window.window.get_net_wm_pid()
    ppid = psutil.Process(pid).ppid()
    cpids = {
        c.window.get_net_wm_pid(): wid for wid, c in window.qtile.windows_map.items()
    }
    for i in range(5):
        if not ppid:
            return
        if ppid in cpids:
            parent = window.qtile.windows_map.get(cpids[ppid])
            parent.minimized = True
            window.parent = parent
            return
        ppid = psutil.Process(ppid).ppid()

@hook.subscribe.client_killed
def _unswallow(window):
    if hasattr(window, 'parent'):
        window.parent.minimized = False

wmname = "LG3D"
#+END_SRC


* The autostart.sh script
This shellscript is called in the config.py script and is starting some keyboard specific stuff.

Again a note is added and this time to ~autostart.sh~ to *not* edit this file directly.

#+BEGIN_SRC sh :tangle autostart.sh :eval no :tangle-mode (identity #o755)
#!/bin/bash
# NOTE: This file is generated from ~/.config/qtile/README.org
#       Please only edit that file and org-babel-tangle (emacs)
#+END_SRC

The us keyboard map is selected and my Alt/Super/Escape keys are changed. With ~xset~ the keyrepeats are increased. Picom is handling the transparancy and the Emacs daemon is started. nm-applet is the NetworkManager applet. Signal is also opened in the tray with the icon.
#+BEGIN_SRC sh :tangle autostart.sh :eval no :tangle-mode (identity #o755)
setxkbmap us &&
xmodmap $HOME/.config/kbswitch &&
$HOME/.config/notify-log.sh $HOME/.config/notify.log && # writing notification to a logfile
xset r rate 300 80 &
picom -b &
/usr/bin/emacs --daemon &
nm-applet &
signal-desktop --start-in-tray --use-tray-icon &
$HOME/.config/stack_startup.sh & # Shell script to search for current Stack AppImage

## Next section is for virtual machines. Uncomment all below
## First a short break
#sleep .2 &&
## Then set the correct size of screen. Make sure screen is correct name and size.
#xrandr --output Virtual-1 --mode 1920x1080 &&
## Set the wallpaper
#feh --bg-scale ~/Stack/Afbeeldingen/Wallpapers/default.jpg & # Set wallpaper
#+end_src


* About this Emacs org document
This is a literate programming document and it describes my Qtile window manager customization. It is written in Emacs in org-mode and uses [[https://orgmode.org/manual/Extracting-Source-Code.html][code blocks]]. The Emacs package ~org-babel-tangle~ exports the code blocks to the actual dotfiles which are used to configure Qtile. Tangling can be done manually. In my case I automated it by the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package. When this orgfile is saved it now automatically tangles the code blocks. The org file should contain ~#+auto_tangle: t~ in the header of the org file..
